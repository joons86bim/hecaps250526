// 4) 모델 선택
 initTree("#tree", async (versionId) => {
   // ... (기존 destroy 생략 상태 유지)
   const urn = window.btoa(versionId).replace(/=/g, "");
   window.CURRENT_MODEL_URN = urn;
   window.CURRENT_MODEL_SAFE_URN = safeUrn(urn);

   taskData.length = 0;
   setSavedTaskData([]);
   await loadTaskDataIfExists();
   taskData.forEach((t) => fillUrnRecursive(t, urn));

   await loadModel(viewer, urn);
   await waitViewerReady(viewer);

   resetViewerInputAndCamera(viewer);
   viewer.resize();

+  // ─────────────────────────────────────────────
+  // [STEP 3~6] ← 여기(모델 로드 완료 직후)로 이동
+  // 기존 WBS 트리 있으면 파괴 후 비우기
+  try { $.ui.fancytree.getTree("#wbs-tree")?.destroy(); } catch {}
+  $("#wbs-group-content").empty();

+  // STEP 3: provider 생성 (모델 기반으로!)
+  let wbsProvider = null;
+  try {
+    const PRIMARY = ["HEC.WBS","HEC.Level","HEC.Zone"];
+    const { provider } = await buildWbsProviderLazy(viewer, {
+      primaryOrder: PRIMARY,
+      source: "all",
+      bucketThreshold: 400,
+      bucketSize: 200
+    });
+    wbsProvider = provider;
+    window.WBS_PROVIDER = provider; // 콘솔에서 확인 가능
+    try {
+      const roots = await provider.roots();
+      console.log("[WBS] roots:", Array.isArray(roots) ? roots.length : roots);
+    } catch (e) {
+      console.warn("[WBS] roots() failed:", e);
+    }
+  } catch (e) {
+    console.warn("[STEP 3] WBS provider failed:", e);
+    wbsProvider = { __provider:true, roots:async()=>[], childrenByPath:async()=>[] };
+  }

+  // STEP 4: 워밍업 (아주 작게)
+  try {
+    if (wbsProvider) {
+      const roots = await wbsProvider.roots();
+      let q = roots.map(r => ({ path: [r.text], depth: 1 }));
+      let c = 0;
+      while (q.length && c < 200) {
+        const { path, depth } = q.shift();
+        if (depth >= 2) continue;
+        const kids = await wbsProvider.childrenByPath(path);
+        c += kids.length;
+        kids.forEach(k => q.push({ path: [...path, k.text], depth: depth + 1 }));
+      }
+      console.log("[STEP 4] WBS warmup OK (depth<=2, cap<=200)");
+    }
+  } catch (e) {
+    console.warn("[STEP 4] WBS warmup failed:", e);
+  }

+  // STEP 5: Fancytree 초기화
+  try {
+    await initWbsPanelWithFancytree(wbsProvider, {
+      primaryOrder: ["HEC.WBS","HEC.Level","HEC.Zone"]
+    });
+    console.log("[STEP 5] WBS fancytree init OK");
+  } catch (e) {
+    console.warn("[STEP 5] WBS fancytree init failed:", e);
+  }

+  // STEP 6: 패널2 리사이저 바인딩 (필요시)
+  try {
+    bindPanel2Resizer(viewer);
+    console.log("[STEP 6] panel2 resizer bound");
+  } catch (e) {
+    console.warn("[STEP 6] resizer bind failed:", e);
+  }
+  // ─────────────────────────────────────────────

   // Task 패널 (SAFE MODE 유지 시 현 상태로 OK)
   try {
     initTaskPanel(taskData);
     initTaskListButtons();
     console.log("[STEP 1] Task panel OK");
   } catch (e) {
     console.warn("[STEP 1] Task init failed:", e);
   }

   try {
     window.dispatchEvent(new Event("panel2-ready"));
     console.log("[STEP 2] panel2-ready dispatched");
   } catch (e) {
     console.warn("[STEP 2] panel2-ready failed:", e);
   }
 });