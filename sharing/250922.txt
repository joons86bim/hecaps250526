// /wwwroot/js/sidebar/task-wbs/layout/panel-resizer.js
// 패널2(Tasks) 내부 좌/우 스플리터(#resizer) 전용 바인딩
// 왼쪽: #task-list-panel  |  스플리터: #resizer  |  오른쪽: #wbs-group-list-panel

export function bindPanel2Resizer(viewer) {
  const container = document.getElementById('vertical-split-container');
  const splitter  = document.getElementById('resizer'); // ★ 내부 스플리터
  const leftPane  = document.getElementById('task-list-panel');
  const rightPane = document.getElementById('wbs-group-list-panel');

  if (!container || !splitter || !leftPane || !rightPane) return;

  // flex 레이아웃에서 left width 픽셀 고정 + right는 남은 공간
  leftPane.style.flex  = '0 0 auto';
  rightPane.style.flex = '1 1 auto';

  const MIN_LEFT   = 320;  // 작업 리스트 최소폭
  const MIN_RIGHT  = 360;  // WBS 최소폭
  const LS_KEY     = 'panel2LeftPx';

  const getContainerWidth = () => container.clientWidth || container.getBoundingClientRect().width || 0;

  const clamp = (px) => {
    const total = getContainerWidth();
    const maxLeft = Math.max(MIN_LEFT, total - MIN_RIGHT);
    return Math.min(maxLeft, Math.max(MIN_LEFT, Math.round(px)));
  };

  const getLeft = () => {
    const n = parseInt((leftPane.style.width || '').replace('px','') || '0', 10);
    return Number.isFinite(n) && n > 0 ? n : Math.round(getContainerWidth() * 0.5);
  };

  const apply = (px) => {
    const w = clamp(px);
    leftPane.style.width = w + 'px';
    try { localStorage.setItem(LS_KEY, String(w)); } catch {}
    // 뷰어 좌표 어긋남 방지: 즉시 + 다음 프레임 두 번 갱신
    try {
      viewer?.resize?.();
      viewer?.impl?.invalidate?.(true, true, true);
      requestAnimationFrame(() => {
        viewer?.resize?.();
        viewer?.impl?.invalidate?.(true, true, true);
      });
    } catch {}
  };

  let dragging = false;
  let startX = 0, startW = 0;

  const getClientX = (e) => (e.touches?.[0]?.clientX ?? e.clientX ?? 0);

  const onDown = (e) => {
    dragging = true;
    startX = getClientX(e);
    startW = getLeft();
    document.body.classList.add('resizing-x');
    document.body.style.userSelect = 'none';
    window.addEventListener('mousemove', onMove, { passive: false });
    window.addEventListener('mouseup', onUp, { once: true });
    window.addEventListener('touchmove', onMove, { passive: false });
    window.addEventListener('touchend', onUp, { once: true });
    e.preventDefault?.();
  };

  const onMove = (e) => {
    if (!dragging) return;
    const dx = getClientX(e) - startX;
    apply(startW + dx);
    e.preventDefault?.();
  };

  const onUp = () => {
    dragging = false;
    document.body.classList.remove('resizing-x');
    document.body.style.userSelect = '';
    window.removeEventListener('mousemove', onMove);
    window.removeEventListener('touchmove', onMove);
    // 최종 보정
    apply(getLeft());
  };

  // 이벤트 연결 (중복 방지 위해 기존 리스너 제거 후 재연결하고 싶으면 splitter 교체 패턴 사용)
  splitter.addEventListener('mousedown', onDown);
  splitter.addEventListener('touchstart', onDown, { passive: true });
  splitter.addEventListener('dblclick', () => {
    const half = Math.round(getContainerWidth() * 0.5);
    apply(half);
  });

  // 창 리사이즈 시 현재 폭 유지 범위 내 보정
  window.addEventListener('resize', () => {
    apply(getLeft());
  });

  // 초기 상태: 저장값 복원 또는 컨테이너의 48%
  const stored = parseInt(localStorage.getItem(LS_KEY) || '0', 10);
  const initial = clamp(Number.isFinite(stored) && stored > 0 ? stored : Math.round(getContainerWidth() * 0.48));
  apply(initial);
}