오케이. “Tasks 탭 전환 시 멈춤”을 WBS 초기화 타이밍 분리 + 유휴 시간 예약으로 풀었습니다.
아래 main.js만 교체하면 됩니다. (오버레이는 계속 꺼둠, 코드 추가는 최소화)

무엇이 달라졌나 (핵심 3줄 요약)

WBS 프로바이더 빌드를 모델 로드 직후 requestIdleCallback으로 미리 시작(백그라운드 느낌).

Tasks 탭 클릭 시 WBS UI만 초기화(프로바이더가 준비돼 있으면 즉시, 아니면 준비되는 즉시).

warmup/오버레이/불필요 대기 제거로 프리즈 요인 최소화.



---

// /wwwroot/js/main.js

import { initTabs } from "./sidebar/init-tabs.js";
import { initTree } from "./sidebar/init-tree.js";
import { initViewer, loadModel } from "./viewer/init-viewer.js";
import { buildWbsProviderLazy } from "./sidebar/task-wbs/wbs/loader.js";
import { bindPanel2Resizer } from "./sidebar/task-wbs/layout/panel-resizer.js";

// ✅ task-wbs 퍼사드
import {
  initTaskPanel,
  initTaskListButtons,
  setSavedTaskData,
  disableViewerEscReset,
  initWbsPanelWithFancytree,   // ← WBS 초기화(지연 호출)
} from "./sidebar/index.js";

/* ==============================
   상수 & 유틸
============================== */
const SIDEBAR_MIN = 360;
const SIDEBAR_DEFAULT = 900;
const PREVIEW_MIN = 520;

function onceViewer(viewer, type) {
  return new Promise((resolve) => {
    const h = () => { viewer.removeEventListener(type, h); resolve(); };
    viewer.addEventListener(type, h);
  });
}
function hasObjectTree(viewer) {
  return !!viewer.model?.getData?.()?.instanceTree;
}
async function waitObjectTree(viewer) {
  if (hasObjectTree(viewer)) return;
  await onceViewer(viewer, Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT);
}

// ⏱ GEOMETRY 로딩: 2초 타임아웃(신호 누락시 진행)
async function waitGeometry(viewer, timeoutMs = 2000) {
  await new Promise((resolve) => {
    let done = false;
    const h = () => { if (done) return; done = true;
      try { viewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, h); } catch {}
      resolve();
    };
    viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, h, { once: true });
    setTimeout(h, timeoutMs);
  });
}
function waitIdle(timeout = 60) {
  return new Promise((resolve) => {
    if (typeof window.requestIdleCallback === "function") {
      window.requestIdleCallback(() => resolve(), { timeout });
    } else {
      setTimeout(resolve, timeout);
    }
  });
}
async function waitViewerReady(viewer) {
  await waitObjectTree(viewer);
  await waitGeometry(viewer);
  await waitIdle(60);
}

function initSidebarWidth() {
  const root = document.documentElement;
  const stored = parseInt(localStorage.getItem("sidebarWidthPx") || "0", 10);
  const maxNow = Math.max(SIDEBAR_MIN, window.innerWidth - PREVIEW_MIN);
  const initial = Number.isFinite(stored) && stored >= SIDEBAR_MIN
    ? Math.min(maxNow, stored)
    : Math.min(maxNow, SIDEBAR_DEFAULT);
  root.style.setProperty("--sidebar-width", initial + "px");
  return initial;
}

function resetViewerInputAndCamera(viewer) {
  try {
    const tc = viewer.toolController;
    if (tc?.isToolActivated?.("BoxSelectionTool")) tc.deactivateTool("BoxSelectionTool");
    viewer.setNavigationLock(false);
    viewer.setActiveNavigationTool?.(viewer.impl?.is2d ? "pan" : "orbit");
    viewer.setSelectionMode(Autodesk.Viewing.SelectionMode.MIXED);
    viewer.clearSelection?.();
    if (!viewer.impl?.is2d) {
      viewer.navigation.setWorldUpVector(new THREE.Vector3(0, 0, 1), true);
      const bb = viewer.model?.getBoundingBox?.();
      if (bb) {
        const c = bb.getCenter(new THREE.Vector3());
        viewer.navigation.setPivotPoint(c);
        viewer.navigation.setTarget(c);
      }
    }
    viewer.fitToView?.();
  } catch (e) { console.warn("[init] resetViewerInputAndCamera failed:", e); }
}

/* ==============================
   전역 상태/샘플
============================== */
window.__ALLOW_WBS_UPDATE = false;

const login = document.getElementById("login");
let taskData = [];
let wbsProviderPromise = null;   // 🔸 지연 준비용: 프로바이더 Promise (전역 1개)

const SAMPLE_TASK_DATA = [
  {
    no: "1",
    selectOptions: ["시공", "가설", "철거"],
    selectedOption: "시공",
    title: "Task A",
    start: "2024-06-25",
    end: "2024-07-01",
    linkedObjects: [{ urn: "SAMPLE_URN", dbId: 1001, text: "벽체1" }],
    children: [
      {
        no: "1.1",
        selectOptions: ["시공", "가설", "철거"],
        selectedOption: "시공",
        title: "Subtask A1",
        start: "2024-06-26",
        end: "2024-06-30",
        linkedObjects: [{ urn: "SAMPLE_URN", dbId: 1002, text: "벽체2" }],
      },
    ],
  },
  { no: "2", selectOptions: ["시공", "가설", "철거"], selectedOption: "시공", title: "Task B", start: "", end: "", linkedObjects: [] },
];

function safeUrn(urn) { return urn.replace(/[^a-zA-Z0-9]/g, "_"); }
function fillUrnRecursive(task, defaultUrn) {
  if (Array.isArray(task.linkedObjects)) {
    task.linkedObjects.forEach((o) => { if (!o.urn) o.urn = defaultUrn || window.CURRENT_MODEL_URN; });
  }
  if (Array.isArray(task.children)) task.children.forEach((ch) => fillUrnRecursive(ch, defaultUrn));
}

/* ==============================
   리사이즈(쓰로틀)
============================== */
window.addEventListener("resize", _.throttle(() => {
  try {
    initSidebarWidth();
    window.viewer?.resize?.();
    window.viewer?.impl?.invalidate?.(true, true, true);
    if (window.gantt && window.taskTree) {
      window.gantt.renderFromTrees(window.taskTree, window.wbsTree);
    }
  } catch (e) { console.warn("[resize] redraw failed", e); }
}, 120));

/* ==============================
   앱 전체 초기화
============================== */
(async function () {
  try {
    // 1) 로그인 체크
    const resp = await fetch("/api/auth/profile", { credentials: "include" });
    if (!resp.ok) { window.location.replace("/api/auth/login"); return; }
    const user = await resp.json();
    login.innerText = `Logout (${user.name})`;
    login.onclick = () => {
      const iframe = document.createElement("iframe");
      iframe.style.visibility = "hidden";
      iframe.src = "https://accounts.autodesk.com/Authentication/LogOut";
      document.body.appendChild(iframe);
      iframe.onload = () => {
        window.location.replace("/api/auth/logout");
        document.body.removeChild(iframe);
      };
    };

    // 2) 레이아웃 표시 & 사이드바 초기폭 반영
    const Sidebar = document.getElementById("sidebar");
    const Header  = document.getElementById("header");
    const Preview = document.getElementById("preview");
    const sidebarResizer = document.getElementById("sidebar-resizer");
    const Loading = document.getElementById("loading");

    Sidebar.style.display = "";
    sidebarResizer.style.display = "";
    Preview.style.display = "";
    Header.style.display = "";
    Loading.style.display = "none"; // ⛔️ 로딩창 강제 숨김
    login.style.visibility = "visible";

    Sidebar.style.removeProperty("width");
    Preview.style.removeProperty("left");
    sidebarResizer.style.removeProperty("left");

    initSidebarWidth();

    // 3) 탭/뷰어 초기화
    initTabs("#sidebar");
    const viewerHost = document.getElementById("viewer-host");
    const viewer = await initViewer(viewerHost);
    window.viewer = viewer;
    disableViewerEscReset(viewer);

    // ⛔️ ProgressOverlay 관련 전부 비활성화(주석 유지)

    bindPanel2Resizer(viewer);

    viewer.resize();
    viewer.impl?.invalidate?.(true, true, true);
    requestAnimationFrame(() => { try { viewer.resize(); viewer.impl?.invalidate?.(true, true, true); } catch {} });

    resetViewerInputAndCamera(viewer);

    requestAnimationFrame(() => {
      const sb = document.getElementById("sidebar");
      if (sb && sb.offsetWidth === 0) {
        document.documentElement.style.setProperty("--sidebar-width", SIDEBAR_DEFAULT + "px");
        viewer.resize();
        viewer.impl?.invalidate?.(true, true, true);
      }
    });

    // 4) 프로젝트 트리 초기화(모델 선택 콜백)
    initTree("#tree", async (versionId) => {
      destroyTaskPanel();

      const urn = window.btoa(versionId).replace(/=/g, "");
      window.CURRENT_MODEL_URN = urn;
      window.CURRENT_MODEL_SAFE_URN = safeUrn(urn);

      taskData.length = 0;
      setSavedTaskData([]);
      await loadTaskDataIfExists();
      taskData.forEach((t) => fillUrnRecursive(t, urn));

      console.log("[main.js] 모델 선택!", versionId, urn);

      // ⛔️ ProgressOverlay 시작 호출 안함
      await loadModel(viewer, urn);

      // 뷰어 준비 대기(짧게)
      await waitViewerReady(viewer);

      // 카메라/입력 보정
      resetViewerInputAndCamera(viewer);
      viewer.resize();

      // ─ Task 패널 먼저
      initTaskPanel(taskData);
      initTaskListButtons();
      window.dispatchEvent(new Event("panel2-ready"));

      // ─────────────────────────────────────────────
      // 🔹 WBS 프로바이더 '미리' 준비(유휴 시간 예약)
      //    → 클릭 시 바로 쓰거나, 아직이면 준비되는 즉시 이어서 UI 초기화
      // ─────────────────────────────────────────────
      const buildProvider = async () => {
        try {
          const { provider } = await buildWbsProviderLazy(viewer, {
            bucketThreshold: 400, bucketSize: 200, source: "all"
          });
          return provider;
        } catch (e) {
          console.warn("[main.js] WBS provider build 실패:", e);
          return { __provider:true, roots: async()=>[], childrenByPath: async()=>[], countAt: ()=>0 };
        }
      };
      wbsProviderPromise = new Promise((resolve) => {
        const kickoff = () => { buildProvider().then(resolve); };
        if ("requestIdleCallback" in window) {
          requestIdleCallback(() => setTimeout(kickoff, 0), { timeout: 1200 });
        } else {
          setTimeout(kickoff, 200);
        }
      });

      // ─ Tasks 탭 클릭 시: WBS UI 1회만 초기화
      let wbsInitOnce = false;
      const tabBtnPanel2 = document.querySelector('.tab-button[data-target="panel2"]');
      const lazyInitWbs = () => {
        if (wbsInitOnce) return;
        wbsInitOnce = true;

        const host = document.getElementById("wbs-group-content");
        if (host) host.innerHTML = `<div style="padding:8px;color:#666">WBS 로딩 중…</div>`;

        // 프로바이더 준비 완료를 기다렸다가, 다음 프레임에 UI만 초기화
        (async () => {
          const provider = await (wbsProviderPromise || buildProvider());
          requestAnimationFrame(async () => {
            try {
              await initWbsPanelWithFancytree(provider, { primaryOrder: ["HEC.WBS","HEC.Level","HEC.Zone"] });
            } catch (e) {
              console.warn("[main.js] initWbsPanelWithFancytree 실패:", e);
              if (host) host.innerHTML = `<div style="padding:8px;color:#b55">WBS 초기화 실패</div>`;
            }
          });
        })();
      };
      tabBtnPanel2?.addEventListener("click", lazyInitWbs, { once: true });

      // 간트 1회 렌더(가볍게)
      requestAnimationFrame(() => {
        try { window.gantt?.renderFromTrees(window.taskTree, window.wbsTree); } catch {}
      });

      // ⛔️ ProgressOverlay finish 없음
    });
  } catch (err) {
    alert("Could not initialize the application. See console for more details.");
    console.error(err);
  }
})();

/* ==============================
   데이터 로드/파괴 유틸
============================== */
async function loadTaskDataIfExists() {
  try {
    const safeUrnVal = window.CURRENT_MODEL_SAFE_URN;
    const url = `/api/tasks?urn=${safeUrnVal}`;
    const resp = await fetch(url, { credentials: "include" });
    if (resp.ok) {
      const data = await resp.json();
      taskData.length = 0;
      if (Array.isArray(data) && data.length > 0) {
        data.forEach((item) => taskData.push(item));
        setSavedTaskData(taskData);
      } else {
        SAMPLE_TASK_DATA.forEach((item) => taskData.push(structuredClone(item)));
        setSavedTaskData(taskData);
      }
    } else {
      taskData.length = 0;
      SAMPLE_TASK_DATA.forEach((item) => taskData.push(structuredClone(item)));
      setSavedTaskData(taskData);
    }
  } catch (err) {
    taskData.length = 0;
    SAMPLE_TASK_DATA.forEach((item) => taskData.push(structuredClone(item)));
    setSavedTaskData(taskData);
    console.warn("task 데이터를 불러오지 못했습니다. 샘플로 초기화:", err);
  }
}

function destroyTaskPanel() {
  console.log("[destroy] panel2 destroy & 재생성");
  try { $.ui.fancytree.getTree("#treegrid")?.destroy(); } catch {}
  window.taskTree = null;
  window.wbsTree = null;
  try { window.gantt?.drawFromRows?.([]); } catch {}
  $("#wbs-group-content").empty();
  $("#treegrid tbody").empty();
}

이렇게 하면:

모델 로딩 직후엔 Task만 즉시 표시 → 프리즈 해소

Tasks 탭 클릭 시에도, 프로바이더가 이미 준비돼 있으면 빠르게 WBS가 뜨고, 아니면 “로딩 중…” 표시 후 준비되는 즉시 초기화

오버레이/워밍업/긴 대기 제거로 전체 흐름이 가뿐해집니다.


