// __SAVED_TASKS → 상태별 dbId 집합으로 빌드
function buildStatusSetsFromTasks(tasks) {
  const S = { C:new Set(), T:new Set(), D:new Set(), TD:new Set() };
  (function walk(arr){
    (arr||[]).forEach(t=>{
      const raw = (t.status || t.selectedOption || "").trim();
      // 한국어 옵션 → 코드 매핑 (필요시 여기 확장)
      let code = raw;
      if (raw === "시공") code = "C";
      else if (raw === "가설") code = "T";
      else if (raw === "철거") code = "D";
      // 그외 TD/X 같은 값은 그대로 허용
      const k = (code || "").toUpperCase();
      (t.linkedObjects||[]).forEach(o=>{
        if (k === "C") S.C.add(o.dbId);
        else if (k === "T") S.T.add(o.dbId);
        else if (k === "D") S.D.add(o.dbId);
        else if (k === "TD" || k === "X") S.TD.add(o.dbId);
      });
      if (t.children) walk(t.children);
    });
  })(tasks);
  return S;
}

// 경로 하나에 대한 카운트 계산
function calcCountsForPath(provider, path, S) {
  let ids = [];
  try { ids = provider.getDbIdsForPath(path, { includeDescendants:true, allowUnbuilt:true }) || []; }
  catch {}
  const set = new Set(ids);
  const r = { total: set.size, c:0, t:0, d:0, td:0 };
  for (const id of set) {
    if (S.C.has(id))  r.c++;
    if (S.T.has(id))  r.t++;
    if (S.D.has(id))  r.d++;
    if (S.TD.has(id)) r.td++;
  }
  return r;
}

// FancyTree 전체에 폴백 집계 주입(노드.data.__aggCounts 사용)
async function installFallbackCounts(tree, provider) {
  const tasks = window.__SAVED_TASKS || [];
  if (!tree || !provider || !tasks.length) return;

  const S = buildStatusSetsFromTasks(tasks);

  function visit(node, path) {
    const counts = calcCountsForPath(provider, path, S);
    // 매트릭스가 0을 주더라도 __aggCounts가 있으면 렌더러가 사용하도록(네 코드가 그렇게 되어 있었음)
    node.data = node.data || {};
    node.data.__aggCounts = counts;
    if (node.children) {
      node.children.forEach(ch=>{
        visit(ch, (ch.data?.__path) || [...path, ch.title]);
      });
    }
  }

  const root = tree.getRootNode();
  (root.children||[]).forEach(n=>{
    visit(n, n.data?.__path || [n.title]);
  });

  try { tree.render(true, true); } catch {}
  requestAnimationFrame(()=>{ try { tree.render(true, true); } catch {} });
  console.log("[FA] fallback counts installed (__aggCounts)");
}