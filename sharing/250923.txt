// WbsStore 초기화 (가능할 때만)
ensureWbsStore().then((mod) => {
  if (!mod) return;
  try {
    // ✅ 공용 헬퍼 사용: 실제 체크박스 WBS 트리 인스턴스
    const wbsFT = findWbsTree();
    mod.initWbsStore?.({ tree: wbsFT, provider: window.__WBS_PROVIDER, eager: "auto" });

    // ✅ 전역 노출(콘솔/다른 모듈에서 사용 가능)
    window.__WBS_STORE__ = mod;

    // ✅ provider 교체 시 인덱스 재구축
    window.__SET_WBS_PROVIDER__ = (p) => {
      try { mod.setProvider?.(p); mod.refreshWbsStore?.(); } catch(_) {}
    };
  } catch(_) {}
});


// ✅ Store 우선: 부분선택(partsel)도 허용해서 경로→dbId를 인덱스에서 바로 회수
let orderedDbIds = [];
let pathByDbId = new Map();

const store = window.__WBS_STORE__;
if (store?.getOrderedDbIdsFromSelection) {
  const { orderedDbIds: ids, pathByDbId: map } =
    await store.getOrderedDbIdsFromSelection({ includePartsel: true });
  orderedDbIds = ids;
  pathByDbId   = map;
} else {
  // 🔁 폴백(이전 방식): 체크된 노드 직접 읽어서 provider/가시 트리에서 수집
  const _wbs = findWbsTree();
  if (!_wbs) { alert("WBS 트리를 찾을 수 없습니다(체크박스가 있는 트리)."); return; }

  const checkedNodes = getCheckedNodesFT(); // (partsel 제외)
  if (!checkedNodes.length) {
    console.warn("[WBS] No checked nodes via API/DOM fallback.");
    alert("WBS에서 '체크(V)'된 항목이 없습니다.\n(체크 후 다시 시도해 주세요)");
    return;
  }

  checkedNodes.sort((a,b) => a.getIndexHier().localeCompare(b.getIndexHier(), undefined, { numeric:true }));

  const seen = new Set();
  for (const node of checkedNodes){
    const path = node.data?.path || pathOfNodeFT(node);
    const ids = await bfsCollectDescendantDbIds(provider, path, node);
    for (const id of ids){
      if (!seen.has(id)) {
        seen.add(id);
        orderedDbIds.push(id);
        pathByDbId.set(id, path.slice());
      }
    }
  }
}

if (!orderedDbIds.length) return alert("체크된 항목에서 연결 가능한 객체(dbId)를 찾지 못했습니다.");



// 스토어 준비 상태
window.__WBS_STORE__?.refreshWbsStore()
  .then(()=>console.log('store ready?', window.__WBS_STORE__?.WbsStore?.isReady));

// 체크 몇 개 하고:
window.__WBS_STORE__?.getOrderedDbIdsFromSelection({ includePartsel: true })
  .then(r => console.log('dbIds:', r.orderedDbIds.length, r.orderedDbIds.slice(0,30)));