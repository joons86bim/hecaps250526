// /wwwroot/js/main.js  (안정화 패치 적용판)

// ===== Imports =====
import { initTabs } from "./sidebar/init-tabs.js";
import { initTree } from "./sidebar/init-tree.js";
import { initPanel2Content } from "./sidebar/panel2.js";
import { initViewer, loadModel } from "./viewer/init-viewer.js";
// import { initToolbar } from "./viewer/toolbar.js";
import {
  initTaskListButtons,
  setSavedTaskData,
} from "./sidebar/panel2-buttons.js";
import { buildWbsTreeData } from "./sidebar/wbsloader.js";
import { bindPanel2Resizer } from "./sidebar/panel2-resizer.js";
import { updateWBSHighlight } from "./sidebar/panel2-ui-helpers.js";

// ===== [NEW] 안전 유틸: throttle 폴리필, 배치 invalidation, 로드 토큰 =====
const throttle = (window._?.throttle)
  ? window._.throttle
  : (fn, wait = 200) => {
      let last = 0, t = null, lastArgs;
      return (...args) => {
        const now = Date.now();
        lastArgs = args;
        if (now - last >= wait) { last = now; fn(...lastArgs); }
        else {
          clearTimeout(t);
          t = setTimeout(() => { last = Date.now(); fn(...lastArgs); }, wait - (now - last));
        }
      };
    };

function withViewerBatch(viewer, work) {
  let invalid = false;
  const orig = viewer.impl.invalidate.bind(viewer.impl);
  viewer.impl.invalidate = () => { invalid = true; };
  try { work(); }
  finally {
    viewer.impl.invalidate = orig;
    if (invalid) requestAnimationFrame(() => orig(true, true, true));
  }
}

// 동시 다중 로드 시, 오래된 콜백 무시용 토큰
let loadToken = 0;

// ===== Repaint Gantt on window resize (throttled & safe) =====
window.addEventListener('resize', throttle(() => {
  try {
    if (window.gantt && window.taskTree) {
      window.gantt.renderFromTrees(window.taskTree, window.wbsTree);
      // console.log('[gantt] redraw on resize');
    }
  } catch (e) {
    console.warn('[gantt] resize redraw failed', e);
  }
}, 200));

// ===== DOM refs & globals =====
const login = document.getElementById("login");
let taskData = []; // 현재 모델의 Task 데이터 (트리용, 갱신됨)

// 샘플 데이터 (서버에 데이터 없을 때 사용)
const SAMPLE_TASK_DATA = [
  {
    no: "1",
    selectOptions: ["시공", "가설", "철거"],
    selectedOption: "시공",
    title: "Task A",
    start: "2024-06-25",
    end: "2024-07-01",
    linkedObjects: [{ urn: "SAMPLE_URN", dbId: 1001, text: "벽체1" }],
    children: [
      {
        no: "1.1",
        selectOptions: ["시공", "가설", "철거"],
        selectedOption: "시공",
        title: "Subtask A1",
        start: "2024-06-26",
        end: "2024-06-30",
        linkedObjects: [{ urn: "SAMPLE_URN", dbId: 1002, text: "벽체2" }]
      }
    ],
  },
  { no: "2", selectOptions: ["시공", "가설", "철거"], selectedOption: "시공", title: "Task B", start: "", end: "", linkedObjects: [] },
];

// URN을 특수문자 없는 safe key로 변환
function safeUrn(urn) {
  return urn.replace(/[^a-zA-Z0-9]/g, "_");
}

// linkedObjects의 누락 urn 채우기
function fillUrnRecursive(task, defaultUrn) {
  if (Array.isArray(task.linkedObjects)) {
    task.linkedObjects.forEach(obj => {
      if (!obj.urn) obj.urn = defaultUrn || window.CURRENT_MODEL_URN;
    });
  }
  if (Array.isArray(task.children)) {
    task.children.forEach(child => fillUrnRecursive(child, defaultUrn));
  }
}

// -------- 앱 전체 초기화 IIFE ---------
(async function () {
  try {
    // 1) 로그인 여부 확인
    const resp = await fetch("/api/auth/profile", { credentials: "include" });
    if (resp.ok) {
      const user = await resp.json();

      if (login) {
        login.innerText = `Logout (${user.name})`;
        login.onclick = () => {
          // Autodesk 로그아웃 (iframe 통한 세션 삭제)
          const iframe = document.createElement("iframe");
          iframe.style.visibility = "hidden";
          iframe.src = "https://accounts.autodesk.com/Authentication/LogOut";
          document.body.appendChild(iframe);
          iframe.onload = () => {
            window.location.replace("/api/auth/logout");
            document.body.removeChild(iframe);
          };
        };
      }

      // 2) 레이아웃 표시 요소 준비 (존재 체크)
      const Sidebar = document.getElementById("sidebar");
      const Header = document.getElementById("header");
      const Preview = document.getElementById("preview");
      const sidebarResizer = document.getElementById("sidebar-resizer");
      const Loading = document.getElementById("loading");

      if (Sidebar) { Sidebar.style.display = ""; Sidebar.style.width = "500px"; }
      if (sidebarResizer) { sidebarResizer.style.display = ""; sidebarResizer.style.left = "500px"; }
      if (Preview) {
        Preview.style.display = "";
        Preview.style.left = Sidebar?.style.width || "500px";
        Preview.style.right = "0";
        Preview.style.top = "3em";
        Preview.style.bottom = "0";
      }
      if (Header) Header.style.display = "";
      if (Loading) Loading.style.display = "none";

      // 3) 각 영역 초기화
      initTabs("#sidebar");
      const viewer = await initViewer(document.getElementById("viewer-host"));
      // initToolbar(viewer);

      // [NEW] 지오메트리 로드시 카메라 fitToView 1회 보장 (UI와 무관하게 안정)
      viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, () => {
        requestAnimationFrame(() => {
          try { viewer.fitToView(true); } catch(e) { console.warn('fitToView failed', e); }
        });
      }, { once: true });

      // 4) 트리(프로젝트/모델) 선택 콜백
      initTree("#tree", async (versionId) => {
        const my = ++loadToken; // [NEW] 최신 로드 토큰

        destroyTaskPanel(); // 이전 패널 완전 초기화

        // 선택 모델의 URN 저장 (global)
        const urn = window.btoa(String(versionId)).replace(/=/g, "");
        window.CURRENT_MODEL_URN = urn;
        const safeUrnVal = safeUrn(urn);
        window.CURRENT_MODEL_SAFE_URN = safeUrnVal;

        // taskData 갱신
        taskData.length = 0;
        setSavedTaskData([]);
        await loadTaskDataIfExists();

        // 모든 taskData에 urn 자동 보정
        taskData.forEach(task => fillUrnRecursive(task, urn));

        // 뷰어에 모델 로드
        console.log("[main.js] 모델 선택! versionId:", versionId, "urn:", urn);
        await loadModel(viewer, urn);
        if (my !== loadToken) return; // [NEW] 더 최신 로드가 시작됐다면 중단

        // OBJECT_TREE_CREATED_EVENT 이후 패널 구성
        const proceed = async () => {
          if (my !== loadToken) return; // [NEW] race 방지
          let wbsData = [];
          try { wbsData = await buildWbsTreeData(viewer); }
          catch (e) { wbsData = []; console.warn("[main.js] WBS 데이터 생성 실패!", e); }

          initTaskListButtons();
          initPanel2Content(taskData, wbsData);
          bindPanel2Resizer();

          // panel2-ready 이벤트로 간트 초기화 트리거
          window.dispatchEvent(new Event('panel2-ready'));

          // 간트 redraw
          setTimeout(() => {
            try {
              // 배치 invalidate로 렌더 부하 완화
              withViewerBatch(viewer, () => {
                window.gantt?.renderFromTrees(window.taskTree, window.wbsTree);
              });
              console.log('[gantt] redraw after panel2-ready');
            } catch(e) { console.warn('[gantt] draw failed', e); }
          }, 0);

          // 트리/연결 하이라이트 최종 1회
          setTimeout(() => {
            if (window.taskTree && window.wbsTree) {
              try { window.taskTree.render(true, true); } catch(_) {}
              setTimeout(updateWBSHighlight, 0);
            }
          }, 0);
        };

        if (viewer.model?.getData?.()?.instanceTree) {
          await proceed();
        } else {
          const handler = async () => {
            viewer.removeEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, handler);
            await proceed();
          };
          viewer.addEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, handler);
        }
      });

    } else {
      // 미로그인: 로그인 페이지로
      window.location.replace("/api/auth/login");
      return;
    }

    if (login) login.style.visibility = "visible";
  } catch (err) {
    alert("Could not initialize the application. See console for more details.");
    console.error(err);
  }
})();

// ----- Task 데이터 (서버 or 샘플) 불러오는 함수 -----
async function loadTaskDataIfExists() {
  try {
    const safeUrnVal = window.CURRENT_MODEL_SAFE_URN;
    const url = `/api/tasks?urn=${safeUrnVal}`;
    const resp = await fetch(url, { credentials: "include" });
    taskData.length = 0;
    if (resp.ok) {
      const data = await resp.json();
      if (Array.isArray(data) && data.length > 0) {
        data.forEach((item) => taskData.push(item)); // 서버 데이터 복사
        setSavedTaskData(taskData);
        return;
      }
    }
    // 서버 데이터 없음 → 샘플
    SAMPLE_TASK_DATA.forEach((item) => taskData.push(structuredClone(item)));
    setSavedTaskData(taskData);
  } catch (err) {
    taskData.length = 0;
    SAMPLE_TASK_DATA.forEach((item) => taskData.push(structuredClone(item)));
    setSavedTaskData(taskData);
    console.warn("task 데이터를 불러오지 못했습니다. 샘플로 초기화:", err);
  }
}

// ----- Task/WBS 패널 전체 제거 및 DOM 재생성 -----
function destroyTaskPanel() {
  console.log("[destroy] panel2 destroy & 재생성");
  try { $.ui?.fancytree?.getTree("#treegrid")?.destroy(); } catch (e) {}

  window.taskTree = null;
  window.wbsTree  = null;

  try { window.gantt?.drawFromRows?.([]); } catch(_) {}

  // jQuery 유무에 따른 안전 처리
  const tpl = `
    <div id="vertical-split-container">
      <div id="task-list-panel">
        <div class="panel-header">
          <span class="title">Task List</span>
          <div class="button-group">
            <button id="btn-add">추가</button>
            <button id="btn-delete">삭제</button>
            <button id="btn-select">객체 선택</button>
            <button id="btn-link">데이터 연결</button>
            <button id="btn-unlink">연결 해제</button>
            <button id="btn-date">공정현황</button>
            <button id="btn-test">테스트</button>
            <button id="btn-update">저장</button>
          </div>
        </div>
        <table id="treegrid" style="width: 100%" class="fancytree-ext-table">
          <colgroup>
            <col width="40px" />
            <col width="60px" />
            <col width="260px" />
            <col width="100px" />
            <col width="100px" />
            <col width="100px" />
            <col width="60px" />
          </colgroup>
          <thead>
            <tr>
              <th>No.</th>
              <th>구분</th>
              <th>작업명</th>
              <th>시작일</th>
              <th>소요시간(Day)</th>
              <th>완료일</th>
              <th>객체개수</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
      <div id="resizer"></div>
      <div class="sidebar-panel" id="wbs-group-list-panel">
        <div class="panel-header">
          <span class="title">WBS Group List</span>
        </div>
        <div class="panel-content" id="wbs-group-content">
          <div id="wbs-tree"></div>
        </div>
      </div>
    </div>
  `;

  if (window.$) {
    try { $("#wbs-group-content").empty(); } catch(_) {}
    try { $("#panel2").html(tpl); } catch(_) {}
  } else {
    const wgc = document.getElementById("wbs-group-content");
    if (wgc) wgc.replaceChildren();
    const p2 = document.getElementById("panel2");
    if (p2) p2.innerHTML = tpl;
  }
}