// /wwwroot/js/viewer/selection-tool.js
export class BoxSelectionTool {
  constructor(viewer) {
    this.viewer = viewer;
    this.name = "BoxSelectionTool";
    this.dragStart = null;
    this.isDragging = false;

    // ÎØ∏Î¶¨ overlay DIV ÏÉùÏÑ±
    this.overlayDiv = document.createElement("div");
    Object.assign(this.overlayDiv.style, {
      position: "absolute",
      border: "2px dashed #4A90E2",
      background: "rgba(74,144,226,0.1)",
      pointerEvents: "none",
      display: "none",
      zIndex: 999,
    });
    this.viewer.container.appendChild(this.overlayDiv);
  }

  getNames() {
    return [this.name];
  }

  getCursor() {
    return "crosshair";
  }

  activate() {
    // Î∞ïÏä§ ÏÑ†ÌÉù Î™®Îìú
    this.viewer.setSelectionMode(Autodesk.Viewing.SelectionMode.MIXED);
    this.viewer.toolController.deactivateTool("navigation");
    this.viewer.setNavigationLock(true);
    this.viewer.container.style.cursor = "crosshair";
    this.overlayDiv.style.display = "none";
    return true;
  }

  deactivate() {
    // ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò Ìà¥Î°ú Î≥µÍ∑Ä
    this.viewer.setNavigationLock(false);
    this.viewer.toolController.activateTool("navigation");
    this.viewer.container.style.cursor = "default";
    this.overlayDiv.style.display = "none";
    this.dragStart = null;
    this.isDragging = false;
    return true;
  }

  handleButtonDown(event, button) {
    if (button !== 0) return false;
    const rect = this.viewer.container.getBoundingClientRect();
    this.dragStart = {
      x: event.clientX - rect.left,
      y: event.clientY - rect.top,
    };
    this.isDragging = true;
    Object.assign(this.overlayDiv.style, {
      display: "block",
      left: `${this.dragStart.x}px`,
      top: `${this.dragStart.y}px`,
      width: "0px",
      height: "0px",
    });
    return true;
  }

  handleMouseMove(event) {
    if (!this.isDragging) return false;
    const rect = this.viewer.container.getBoundingClientRect();
    const cx = event.clientX - rect.left,
      cy = event.clientY - rect.top;
    const left = Math.min(this.dragStart.x, cx),
      top = Math.min(this.dragStart.y, cy),
      width = Math.abs(this.dragStart.x - cx),
      height = Math.abs(this.dragStart.y - cy);
    Object.assign(this.overlayDiv.style, {
      left: `${left}px`,
      top: `${top}px`,
      width: `${width}px`,
      height: `${height}px`,
    });
    return true;
  }

  handleButtonUp(event, button) {
    if (!this.isDragging || button !== 0) return false;

    // 1) ÎìúÎûòÍ∑∏ ÏòÅÏó≠ Í≥ÑÏÇ∞
    const rect = this.viewer.container.getBoundingClientRect();
    const end = {
      x: event.clientX - rect.left,
      y: event.clientY - rect.top,
    };
    const bounds = {
      xmin: Math.min(this.dragStart.x, end.x),
      xmax: Math.max(this.dragStart.x, end.x),
      ymin: Math.min(this.dragStart.y, end.y),
      ymax: Math.max(this.dragStart.y, end.y),
    };
    const leftToRight = end.x >= this.dragStart.x;

    // 2) Î™®Îì† dbId ÏàúÌöå
    const itree = this.viewer.model.getInstanceTree();
    const allDb = [];
    itree.enumNodeChildren(itree.getRootId(), (id) => allDb.push(id), true);

    const sel = [];
    allDb.forEach((dbId) => {
      const frags = [];
      itree.enumNodeFragments(dbId, (fid) => frags.push(fid));
      for (const fragId of frags) {
        const fp = this.viewer.impl.getFragmentProxy(this.viewer.model, fragId);
        fp.updateAnimTransform(); // ‚òÖ Î∞òÎìúÏãú ÏµúÏã† transform Î∞òÏòÅ
        const box = new THREE.Box3();
        fp.getWorldBounds(box);

        // 8Í∞ú Íº≠ÏßìÏ†ê ‚Üí ÌôîÎ©¥ Ï¢åÌëú
        const pts = [
          new THREE.Vector3(box.min.x, box.min.y, box.min.z),
          new THREE.Vector3(box.max.x, box.min.y, box.min.z),
          new THREE.Vector3(box.min.x, box.max.y, box.min.z),
          new THREE.Vector3(box.max.x, box.max.y, box.min.z),
          new THREE.Vector3(box.min.x, box.min.y, box.max.z),
          new THREE.Vector3(box.max.x, box.min.y, box.max.z),
          new THREE.Vector3(box.min.x, box.max.y, box.max.z),
          new THREE.Vector3(box.max.x, box.max.y, box.max.z),
        ].map((v) => this.viewer.worldToClient(v)); // ‚òÖ viewer.worldToClient ÏÇ¨Ïö©

        const fullyInside = pts.every(
          (p) =>
            p.x >= bounds.xmin &&
            p.x <= bounds.xmax &&
            p.y >= bounds.ymin &&
            p.y <= bounds.ymax
        );
        const partlyInside = pts.some(
          (p) =>
            p.x >= bounds.xmin &&
            p.x <= bounds.xmax &&
            p.y >= bounds.ymin &&
            p.y <= bounds.ymax
        );

        if ((leftToRight && fullyInside) || (!leftToRight && partlyInside)) {
          sel.push(dbId);
          break;
        }
      }
    });

    // 3) ÏÑ†ÌÉù Ï†ÅÏö©
    this.viewer.select(sel);
    console.log(`üì¶ ${sel.length} selected`);

    // 4) Î≥µÍ∑Ä
    this.overlayDiv.style.display = "none";
    this.isDragging = false;
    this.viewer.toolController.deactivateTool(this.name); // Î∞òÎìúÏãú ToolControllerÏóêÏÑú ÎÇ¥Î¶¨Í∏∞
    this.viewer.toolController.activateTool("navigation");
    this.viewer.setNavigationLock(false);
    this.viewer.container.style.cursor = "default";

    // Ìà¥Î∞î Î≤ÑÌäºÎèÑ ÌÅ¥Î¶≠ Î™®ÎìúÎ°ú ÎèåÎ†§ÎÜìÍ∏∞
    const toolbar = document.querySelector("#viewer-toolbar");
    toolbar
      .querySelectorAll(".tool-button")
      .forEach((b) => b.classList.remove("active"));
    toolbar.querySelector('[data-tool="click"]').classList.add("active");

    return true;
  }

  handleSingleClick(event, button) {
    if (button !== 0) return false;
    this.viewer.toolController.deactivateTool(this.name);
    this.viewer.toolController.activateTool("navigation");
    this.viewer.container.style.cursor = "default";
    const toolbar = document.querySelector("#viewer-toolbar");
    toolbar
      .querySelectorAll(".tool-button")
      .forEach((b) => b.classList.remove("active"));
    toolbar.querySelector('[data-tool="click"]').classList.add("active");
    return true;
  }
}

/**
 * BoxSelectionTool Îì±Î°ù Î∞è ÌôúÏÑ±Ìôî
 * @param {Autodesk.Viewing.GuiViewer3D} viewer
 */
export function enableBoxSelectionMode(viewer) {
  let tool = viewer.toolController.getTool("BoxSelectionTool");
  if (!tool) {
    tool = new BoxSelectionTool(viewer);
    viewer.toolController.registerTool(tool);
  }
  viewer.toolController.activateTool("BoxSelectionTool");
}
