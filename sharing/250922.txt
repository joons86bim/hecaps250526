// STEP 4: 워밍업 + DBID 매핑 씨드
async function seedDbIdMappings(provider, { maxDepth = 2, cap = 600 } = {}) {
  const roots = await provider.roots();
  const q = (roots || []).map(r => ({ path: [r.text], depth: 0 }));
  let visited = 0, mapped = 0;

  while (q.length && visited < cap) {
    const { path, depth } = q.shift();
    visited++;

    // ❗여기가 핵심: 경로→dbId 맵을 먼저 씨드
    try {
      const ids = provider.getDbIdsForPath?.(path, { includeDescendants: true, allowUnbuilt: true }) || [];
      if (Array.isArray(ids)) mapped += 1;
    } catch {}

    // 자식 큐잉
    if (depth < maxDepth) {
      let kids = [];
      try { kids = await provider.childrenByPath(path) || []; } catch {}
      for (const ch of kids) {
        const np = ch.__path || [...path, ch.text];
        q.push({ path: np, depth: depth + 1 });
      }
    }
  }
  console.log("[STEP 4] WBS warmup+seed OK (visited=", visited, ", mappedPaths=", mapped, ")");
}



try {
  await initWbsPanelWithFancytree(wbsProvider, { primaryOrder: ["HEC.WBS","HEC.Level","HEC.Zone"] });
  console.log("[STEP 5] WBS fancytree init OK");

  // 루트 대상 더블패스: 0 0 0도 '준비 완료'로 취급 (객체만 있으면 OK)
  const tree = $.ui.fancytree.getTree("#wbs-tree");
  if (tree && window.__WBS_DEBUG?.ensureCountsForAllRoots) {
    const roots = tree.getRootNode().children || [];
    const need =
      !roots.some(n => {
        const k = n.data?.pathKey;
        const c = k && window.__WBS_DEBUG.getCounts?.(k);
        return c && typeof c === "object";
      });
    if (need) {
      await window.__WBS_DEBUG.ensureCountsForAllRoots(tree, wbsProvider);
      tree.render(true, true);
    }
  }
} catch (e) {
  console.warn("[STEP 5] WBS fancytree init failed:", e);
}