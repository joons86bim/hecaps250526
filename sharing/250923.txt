-    click: function(event, data){
-      const t = data.targetType; // expander | title | icon | checkbox
-      if (t === "expander" || t === "checkbox") return; // 기본 동작 허용
-      event.preventDefault();
-      return false;
-    },
+    click: function(event, data){
+      const t = data.targetType; // expander | title | icon | checkbox
+      // 눈알(eye-toggle)은 FancyTree 클릭차단 대상에서 제외 (위임 핸들러가 처리)
+      const isEye = event?.originalEvent?.target?.closest?.(".eye-toggle");
+      if (isEye) return;
+      if (t === "expander" || t === "checkbox") return; // 기본 동작 허용
+      event.preventDefault();
+      return false;
+    },



-  tree.$div.fancytree("option", "expand", function(_ev, data) {
-    if (data.node?.expanded) setTimeout(() => { try { repaintTree(tree); } catch {} }, 0);
-  });
+  const prevExpand = tree.options.expand;
+  tree.$div.fancytree("option", "expand", function(ev, data) {
+    // 기존 expand 핸들러 먼저 수행 (ensureCountsForSubtree 등 원래 로직 보존)
+    try { if (typeof prevExpand === "function") prevExpand.call(this, ev, data); } catch {}
+    // 셀 색칠은 추가로 보강
+    if (data.node?.expanded) {
+      setTimeout(() => { try { repaintTree(tree); } catch {} }, 0);
+    }
+  });



-    select: function(event, data){
-      //선택 토글 후, 현재 노드 + 상위 경로만 재렌더해서 상태 클래스(wbs-*)를 즉시 복구
-      setTimeout(() => {
-        try { data.node.render(true);} catch {}
-        try {
-          const parents = data.node.getParentList(false, true) || [];
-          parents.forEach(p => { try { p.render(true);} catch {}})
-        } catch {}
-      }, 0);
-    }
+    select: function(event, data){
+      // 선택 변경 후 전체 테이블을 안전하게 한 번만 렌더
+      const tree = data.tree;
+      setTimeout(() => { try { tree.render(true); } catch {} }, 0);
+    }






