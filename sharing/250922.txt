// /wwwroot/js/main.js  — "Tasks 탭 클릭 시 멈춤" 완화용 경량/안정판

import { initTabs } from "./sidebar/init-tabs.js";
import { initTree } from "./sidebar/init-tree.js";
import { initViewer, loadModel } from "./viewer/init-viewer.js";
import { buildWbsProviderLazy } from "./sidebar/task-wbs/wbs/loader.js";
import { bindPanel2Resizer } from "./sidebar/task-wbs/layout/panel-resizer.js";

// 퍼사드
import {
  initTaskPanel,
  initTaskListButtons,
  setSavedTaskData,
  disableViewerEscReset,
  initWbsPanelWithFancytree, // WBS 초기화(지연 실행)
} from "./sidebar/index.js";

/* ==============================
   상수 & 유틸
============================== */
const SIDEBAR_MIN = 360;
const SIDEBAR_DEFAULT = 900;
const PREVIEW_MIN = 520;

function onceViewer(viewer, type) {
  return new Promise((resolve) => {
    const h = () => { try { viewer.removeEventListener(type, h); } catch {} ; resolve(); };
    viewer.addEventListener(type, h);
  });
}
function hasObjectTree(viewer) {
  return !!viewer.model?.getData?.()?.instanceTree;
}
async function waitObjectTree(viewer) {
  if (hasObjectTree(viewer)) return;
  await onceViewer(viewer, Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT);
}

// ✅ 과도한 대기 제거: GEOMETRY_LOADED_EVENT까지 강대기하지 않음
async function waitViewerReady(viewer) {
  await waitObjectTree(viewer);
  await waitIdle(30);
}

function waitIdle(timeout = 60) {
  return new Promise((resolve) => {
    if (typeof window.requestIdleCallback === "function") {
      window.requestIdleCallback(() => resolve(), { timeout });
    } else {
      setTimeout(resolve, timeout);
    }
  });
}

function ensureCss(href) {
  if (![...document.querySelectorAll('link[rel="stylesheet"]')].some(l => l.href.includes(href))) {
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = href;
    document.head.appendChild(link);
  }
}

/** 초기 사이드바 폭을 1곳에서만 결정 & 반영 */
function initSidebarWidth() {
  const root = document.documentElement;
  const stored = parseInt(localStorage.getItem("sidebarWidthPx") || "0", 10);
  const maxNow = Math.max(SIDEBAR_MIN, window.innerWidth - PREVIEW_MIN);
  const initial = Number.isFinite(stored) && stored >= SIDEBAR_MIN
    ? Math.min(maxNow, stored)
    : Math.min(maxNow, SIDEBAR_DEFAULT);
  root.style.setProperty("--sidebar-width", initial + "px");
  return initial;
}

/** 뷰어 입력/카메라/툴 기본 상태 강제 초기화 */
function resetViewerInputAndCamera(viewer) {
  try {
    const tc = viewer.toolController;
    if (tc?.isToolActivated?.("BoxSelectionTool")) tc.deactivateTool("BoxSelectionTool");
    viewer.setNavigationLock(false);
    const fallbackNav = viewer.impl?.is2d ? "pan" : "orbit";
    viewer.setActiveNavigationTool?.(fallbackNav);
    viewer.setSelectionMode(Autodesk.Viewing.SelectionMode.MIXED);
    viewer.clearSelection?.();

    if (!viewer.impl?.is2d) {
      viewer.navigation.setWorldUpVector(new THREE.Vector3(0, 0, 1), true);
      const bb = viewer.model?.getBoundingBox?.();
      if (bb) {
        const center = bb.getCenter(new THREE.Vector3());
        viewer.navigation.setPivotPoint(center);
        viewer.navigation.setTarget(center);
      }
    }
    viewer.fitToView?.();
  } catch (e) {
    console.warn("[init] resetViewerInputAndCamera failed:", e);
  }
}

/* ==============================
   전역 상태/샘플
============================== */
window.__ALLOW_WBS_UPDATE = false;

const login = document.getElementById("login");
let taskData = [];

const SAMPLE_TASK_DATA = [
  {
    no: "1",
    selectOptions: ["시공", "가설", "철거"],
    selectedOption: "시공",
    title: "Task A",
    start: "2024-06-25",
    end: "2024-07-01",
    linkedObjects: [{ urn: "SAMPLE_URN", dbId: 1001, text: "벽체1" }],
    children: [
      {
        no: "1.1",
        selectOptions: ["시공", "가설", "철거"],
        selectedOption: "시공",
        title: "Subtask A1",
        start: "2024-06-26",
        end: "2024-06-30",
        linkedObjects: [{ urn: "SAMPLE_URN", dbId: 1002, text: "벽체2" }],
      },
    ],
  },
  { no: "2", selectOptions: ["시공", "가설", "철거"], selectedOption: "시공", title: "Task B", start: "", end: "", linkedObjects: [] },
];

function safeUrn(urn) { return urn.replace(/[^a-zA-Z0-9]/g, "_"); }
function fillUrnRecursive(task, defaultUrn) {
  if (Array.isArray(task.linkedObjects)) {
    task.linkedObjects.forEach((obj) => { if (!obj.urn) obj.urn = defaultUrn || window.CURRENT_MODEL_URN; });
  }
  if (Array.isArray(task.children)) task.children.forEach((child) => fillUrnRecursive(child, defaultUrn));
}

/* ==============================
   리사이즈(쓰로틀)
============================== */
window.addEventListener("resize", _.throttle(() => {
  try {
    initSidebarWidth();
    window.viewer?.resize?.();
    window.viewer?.impl?.invalidate?.(true, true, true);
    if (window.gantt && window.taskTree) window.gantt.renderFromTrees(window.taskTree, window.wbsTree);
  } catch (e) {
    console.warn("[resize] redraw failed", e);
  }
}, 120));

/* ==============================
   앱 전체 초기화
============================== */
(async function () {
  try {
    // 1) 로그인 체크
    const resp = await fetch("/api/auth/profile", { credentials: "include" });
    if (!resp.ok) { window.location.replace("/api/auth/login"); return; }
    const user = await resp.json();
    login.innerText = `Logout (${user.name})`;
    login.onclick = () => {
      const iframe = document.createElement("iframe");
      iframe.style.visibility = "hidden";
      iframe.src = "https://accounts.autodesk.com/Authentication/LogOut";
      document.body.appendChild(iframe);
      iframe.onload = () => {
        window.location.replace("/api/auth/logout");
        document.body.removeChild(iframe);
      };
    };

    // 2) 레이아웃 표시 & 사이드바 초기폭 1회 반영
    const Sidebar = document.getElementById("sidebar");
    const Header  = document.getElementById("header");
    const Preview = document.getElementById("preview");
    const sidebarResizer = document.getElementById("sidebar-resizer");
    const Loading = document.getElementById("loading");

    Sidebar.style.display = "";
    sidebarResizer.style.display = "";
    Preview.style.display = "";
    Header.style.display = "";
    Loading.style.display = "none"; // ✅ 로딩창 비활성(요청사항)
    login.style.visibility = "visible";

    Sidebar.style.removeProperty("width");
    Preview.style.removeProperty("left");
    sidebarResizer.style.removeProperty("left");

    initSidebarWidth();

    // 3) 탭/뷰어 초기화
    initTabs("#sidebar");
    const viewerHost = document.getElementById("viewer-host");
    const viewer = await initViewer(viewerHost);
    window.viewer = viewer;
    disableViewerEscReset(viewer);

    // ▷ ProgressOverlay 연동 완전 비활성 (요청사항: 로딩 관련 주석 처리)
    // ensureCss('/css/05-hec-progress-overlay.css');
    // await import('./viewer/hec.ProgressOverlay.js');
    // const progressOverlay = await viewer.loadExtension('hec.ProgressOverlay', { keepAlive: 'off' });
    // window.progressOverlay = progressOverlay;

    // 리사이저 바인딩(반드시 viewer 전달)
    bindPanel2Resizer(viewer);

    // 초기 좌표 보정 + invalidate
    viewer.resize();
    viewer.impl?.invalidate?.(true, true, true);
    requestAnimationFrame(() => {
      try { viewer.resize(); viewer.impl?.invalidate?.(true, true, true); } catch {}
    });

    resetViewerInputAndCamera(viewer);

    requestAnimationFrame(() => {
      const sb = document.getElementById("sidebar");
      if (sb && sb.offsetWidth === 0) {
        document.documentElement.style.setProperty("--sidebar-width", SIDEBAR_DEFAULT + "px");
        viewer.resize();
        viewer.impl?.invalidate?.(true, true, true);
      }
    });

    // 4) 프로젝트 트리 초기화(모델 선택 콜백)
    initTree("#tree", async (versionId) => {
      destroyTaskPanel();

      const urn = window.btoa(versionId).replace(/=/g, "");
      window.CURRENT_MODEL_URN = urn;
      window.CURRENT_MODEL_SAFE_URN = safeUrn(urn);

      taskData.length = 0;
      setSavedTaskData([]);
      await loadTaskDataIfExists();
      taskData.forEach((t) => fillUrnRecursive(t, urn));

      console.log("[main.js] 모델 선택!", versionId, urn);

      // ▷ ProgressOverlay 사용 중지
      // const ov = viewer.getExtension('hec.ProgressOverlay');
      // ov?.beginLoadFor(urn, '모델을 로드하는 중입니다…');

      await loadModel(viewer, urn);

      // ✅ 과도 대기 제거판
      await waitViewerReady(viewer);

      resetViewerInputAndCamera(viewer);
      viewer.resize();

      // ── Task 패널: 먼저 가볍게 렌더(멈춤 방지: UI 선표시)
      initTaskPanel(taskData);
      initTaskListButtons();
      window.dispatchEvent(new Event("panel2-ready"));

      // ── WBS Provider 준비 (지연 호출)
      let wbsProvider;
      try {
        const { provider } = await buildWbsProviderLazy(viewer, {
          // 과도한 워밍업/대량 버킷은 당분간 축소
          bucketThreshold: 400,
          bucketSize: 200,
          source: "all",
        });
        wbsProvider = provider;
      } catch (e) {
        console.warn("[main.js] WBS 데이터 생성 실패! (임시 빈 프로바이더로 대체)", e);
        wbsProvider = { __provider:true, roots: async()=>[], childrenByPath: async()=>[], countAt: ()=>0 };
      }

      // ❗ 워밍업은 잠시 중단 (freeze 유발 가능성 제거)
      // await warmup(wbsProvider, 3, 1200);

      // ✅ WBS 초기화는 다음 프레임 + idle 후로 미룸 (탭 전환 멈춤 완화 핵심)
      requestAnimationFrame(async () => {
        await waitIdle(60);
        try {
          await initWbsPanelWithFancytree(wbsProvider, { primaryOrder: ["HEC.WBS","HEC.Level","HEC.Zone"] });
        } catch (e) {
          console.warn("[main.js] initWbsPanelWithFancytree 실패:", e);
        }
      });

      // 간트: 가볍게 1회
      requestAnimationFrame(() => {
        try { window.gantt?.renderFromTrees(window.taskTree, window.wbsTree); } catch {}
      });

      // ▷ ProgressOverlay 종료도 사용 안 함
      // try { progressOverlay.finishFor(urn, '모델 로딩이 완료되었습니다.'); } catch (e) {}
    });

  } catch (err) {
    alert("Could not initialize the application. See console for more details.");
    console.error(err);
  }
})();

/* ==============================
   데이터 로드/파괴 유틸
============================== */
async function loadTaskDataIfExists() {
  try {
    const safeUrnVal = window.CURRENT_MODEL_SAFE_URN;
    const url = `/api/tasks?urn=${safeUrnVal}`;
    const resp = await fetch(url, { credentials: "include" });
    if (resp.ok) {
      const data = await resp.json();
      taskData.length = 0;
      if (Array.isArray(data) && data.length > 0) {
        data.forEach((item) => taskData.push(item));
        setSavedTaskData(taskData);
      } else {
        SAMPLE_TASK_DATA.forEach((item) => taskData.push(structuredClone(item)));
        setSavedTaskData(taskData);
      }
    } else {
      taskData.length = 0;
      SAMPLE_TASK_DATA.forEach((item) => taskData.push(structuredClone(item)));
      setSavedTaskData(taskData);
    }
  } catch (err) {
    taskData.length = 0;
    SAMPLE_TASK_DATA.forEach((item) => taskData.push(structuredClone(item)));
    setSavedTaskData(taskData);
    console.warn("task 데이터를 불러오지 못했습니다. 샘플로 초기화:", err);
  }
}

function destroyTaskPanel() {
  try { $.ui.fancytree.getTree("#treegrid")?.destroy(); } catch {}
  window.taskTree = null;
  window.wbsTree = null;
  try { window.gantt?.drawFromRows?.([]); } catch {}
  $("#wbs-group-content").empty();
  $("#treegrid tbody").empty();
}

// (참고) warmup은 현재 미사용
// async function warmup(provider, maxDepth=3, hardCap=1200){
//   const roots = await provider.roots();
//   let q = roots.map(r => ({ path: [r.text], depth: 1 }));
//   let c = 0;
//   while (q.length && c < hardCap) {
//     const { path, depth } = q.shift();
//     if (depth >= maxDepth) continue;
//     const kids = await provider.childrenByPath(path);
//     c += kids.length;
//     kids.forEach(k => q.push({ path: [...path, k.text], depth: depth+1 }));
//   }
// }