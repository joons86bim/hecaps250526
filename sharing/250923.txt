/* ==============================
   WBS 셀 배지/색상 렌더러
   ============================== */

// 배지 색상 팔레트(트리용)
const __WBS_BADGE_COLORS = {
  C:  "#0a9d5a", // 시공/완료
  T:  "#f2c14e", // 가설/진행
  D:  "#d72638", // 철거
  TD: "#7a5cff"  // 동시/복합
};

// (1) CSS 주입
function injectWbsBadgeCss() {
  if (document.getElementById("wbs-badge-style")) return;
  const css = `
    .wbs-badges { display:inline-flex; gap:6px; margin-left:8px; vertical-align:middle; }
    .wbs-badge {
      display:inline-block; min-width:18px; padding:0 6px; height:18px; line-height:18px;
      font-size:11px; font-weight:600; border-radius:9px; color:#fff; text-align:center;
      box-shadow:inset 0 -1px rgba(0,0,0,0.15);
    }
    .wbs-badge.hidden { display:none; }
    .wbs-badge.C  { background:${__WBS_BADGE_COLORS.C}; }
    .wbs-badge.T  { background:${__WBS_BADGE_COLORS.T}; color:#333; }
    .wbs-badge.D  { background:${__WBS_BADGE_COLORS.D}; }
    .wbs-badge.TD { background:${__WBS_BADGE_COLORS.TD}; }
  `.trim();
  const s = document.createElement("style");
  s.id = "wbs-badge-style";
  s.textContent = css;
  document.head.appendChild(s);
}

// (2) 노드 → 경로 계산
function getPathForNode(node) {
  // fancytree root는 표시노드가 아니니 제외
  const path = [];
  let n = node;
  while (n && !n.isRoot()) {
    path.unshift(n.title);
    n = n.parent;
  }
  // initWbsPanelWithFancytree에서 __path를 심어줬다면 그걸 우선 사용
  return node.data?.__path || path;
}

// (3) 카운트 가져오기 (브릿지된 getCounts 사용)
function getCountsForPath(path) {
  const D = window.__WBS_DEBUG || {};
  const k = (D.toKey ? D.toKey(path) : (window.toKey ? window.toKey(path) : null));
  if (!k) return { total:0, c:0, t:0, d:0, td:0 };
  const c = D.getCounts ? D.getCounts(k) : {};
  return {
    total: c.total|0, c: c.c|0, t: c.t|0, d: c.d|0, td: c.td|0
  };
}

// (4) 노드 하나의 배지 UI를 만들거나 갱신
function ensureNodeBadges(node) {
  const $ = window.jQuery || window.$;
  if (!$ || !node || !node.span) return;

  const path = getPathForNode(node);
  const counts = getCountsForPath(path);

  const $span = $(node.span);                   // .fancytree-node
  const $title = $span.find(".fancytree-title");// 타이틀 스팬
  if ($title.length === 0) return;

  let $badges = $span.find(".wbs-badges");
  if ($badges.length === 0) {
    $badges = $("<span class='wbs-badges'/>").insertAfter($title);
    // 배지 4종 생성(C/T/D/TD)
    $badges.append("<span class='wbs-badge C'  data-k='c'>0</span>");
    $badges.append("<span class='wbs-badge T'  data-k='t'>0</span>");
    $badges.append("<span class='wbs-badge D'  data-k='d'>0</span>");
    $badges.append("<span class='wbs-badge TD' data-k='td'>0</span>");
  }

  const setVal = (k, v) => {
    const b = $badges.find(`.wbs-badge.${k}`);
    if (b.length) {
      b.text(v|0);
      b.toggleClass("hidden", (v|0) === 0);
    }
  };

  setVal("C", counts.c);
  setVal("T", counts.t);
  setVal("D", counts.d);
  setVal("TD", counts.td);
}

// (5) 트리 전체 리프레시
function colorizeWbsTree(tree) {
  if (!tree) return;
  tree.visit(node => ensureNodeBadges(node));
}

// (6) 렌더 훅 설치(트리 리렌더 때마다 자동 갱신)
function installWbsBadgeRenderer(tree) {
  if (!tree) return;
  injectWbsBadgeCss();

  // renderNode 훅 덮어쓰기(기존 훅이 있으면 체이닝)
  const prev = tree.options.renderNode;
  tree.$div.fancytree("option", "renderNode", function(event, data) {
    if (typeof prev === "function") prev.call(this, event, data);
    // 각 노드 타이틀 렌더 후 배지 갱신
    try { ensureNodeBadges(data.node); } catch {}
  });

  // 초기 2회 강제 갱신(첫 프레임/비동기 안전)
  try { colorizeWbsTree(tree); } catch {}
  requestAnimationFrame(() => { try { colorizeWbsTree(tree); } catch {} });
}



