/* ---------- FancyTree 체크 수집 ---------- */
async function collectFromFancyTree(){
  const tree = $.ui.fancytree.getTree("#wbs-group-list") || $.ui.fancytree.getTree("#treegrid-wbs") || window.wbsTree;
  const provider = window.__WBS_PROVIDER;
  const pathByDbId = new Map();
  const orderedDbIds = [];
  const seen = new Set();

  if (!tree) return { orderedDbIds, pathByDbId };

  // ✅ 정확히 체크된 노드만 수집
  const checkedNodes = tree.getSelectedNodes(true) || [];  // true → includePartsel=false
  if (!checkedNodes.length) return { orderedDbIds, pathByDbId };

  // 문서 순서 정렬
  checkedNodes.sort((a,b) => {
    const ia = a.getIndexHier();
    const ib = b.getIndexHier();
    return ia.localeCompare(ib, undefined, { numeric:true });
  });

  // 각 노드별 경로
  function pathOfNode(n) {
    const out = [];
    let cur = n;
    while (cur && !cur.isRoot()) {
      out.unshift(cur.title || cur.text || cur.key);
      cur = cur.parent;
    }
    return out;
  }

  // BFS로 자손 leaf dbId 수집
  for (const node of checkedNodes) {
    const path = pathOfNode(node);
    const ids = await bfsCollectDescendantDbIds(provider, path, node);
    for (const id of ids) {
      if (!seen.has(id)) {
        seen.add(id);
        orderedDbIds.push(id);
        pathByDbId.set(id, path.slice());
      }
    }
  }

  return { orderedDbIds, pathByDbId };
}



// [데이터연결] 내부에서
let orderedDbIds = [], pathByDbId = new Map();
if (hasWbsStore) {
  try {
    const res = await WbsStore.getOrderedDbIdsFromCheckedExact();
    orderedDbIds = res?.orderedDbIds || [];
    pathByDbId = res?.pathByDbId || new Map();
  } catch(_) {}
}

// WbsStore가 없거나 비었을 경우 → FancyTree 수집
if (!orderedDbIds.length) {
  const fb = await collectFromFancyTree();
  orderedDbIds = fb.orderedDbIds;
  pathByDbId = fb.pathByDbId;
}


