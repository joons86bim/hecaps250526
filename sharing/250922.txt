// /wwwroot/js/main.js  — SAFE MODE: Tasks/WBS/Gantt 모두 차단하여 프리즈 원인 격리

import { initTabs } from "./sidebar/init-tabs.js";
import { initTree } from "./sidebar/init-tree.js";
import { initViewer, loadModel } from "./viewer/init-viewer.js";
import { buildWbsProviderLazy } from "./sidebar/task-wbs/wbs/loader.js";
import { bindPanel2Resizer } from "./sidebar/task-wbs/layout/panel-resizer.js";
import { 
  initTaskPanel, 
  initTaskListButtons, 
  setSavedTaskData, 
  disableViewerEscReset, 
  initWbsPanelWithFancytree 
} from "./sidebar/index.js";

// ✅ SAFE MODE: 패널2(Tasks/WBS/간트) 관련 초기화 전부 막기
const SAFE_MODE = true;

/* ============================== */
const SIDEBAR_MIN = 360;
const SIDEBAR_DEFAULT = 900;
const PREVIEW_MIN = 520;
let __MODEL_RUN_TOKEN = 0; // 모델 전환/초기화 레이스 가드
window.__MODEL_RUN_TOKEN = (window.__MODEL_RUN_TOKEN || 0);

//Helpers
//루트의 카운트가 계산 "완료" 됐는지(정의됐는지)만 확인
//0 0 0도 정상으로 인정
function areRootCountsReady(tree) {
  const root = tree.getRootNode();
  if (!root?.children?.length) return false;
  return root.children.some(n => {
    const k = n.data?.pathKey;
    const D = window.__WBS_DEBUG;
    //getCounts가 객체를 반환하기만 하면 준비 완료로 본다. (숫자 값은 0이어도 OK)
    const c = k && D?.getCounts?.(k);
    if (c && typeof c === "object") return true;
    //폴백 집계(__aggCounts)가 있으면 이것도 준비 완료로 인정
    if (n.data?.__aggCounts) return true;
    return false;
  });
}

// ── [추가] Property DB 대기
async function waitPropertyDb(viewer, timeoutMs = 120000) {
  // 2D는 prop DB가 다르게 동작할 수 있으니, 있으면 바로 통과
  try {
    if (viewer?.model?.getPropertyDb?.()) return;
  } catch {}
  await new Promise((resolve) => {
    let done = false;
    const h = () => {
      if (done) return;
      done = true;
      try { viewer.removeEventListener(Autodesk.Viewing.PROPERTY_DB_CREATED_EVENT, h); } catch {}
      resolve();
    };
    viewer.addEventListener(Autodesk.Viewing.PROPERTY_DB_CREATED_EVENT, h, { once: true });
    // 타임아웃 폴백
    setTimeout(h, timeoutMs);
  });
}

// ── [수정] waitViewerReady: PROPERTY_DB까지 포함해 모두 끝날 때까지 기다림
async function waitViewerReady(viewer) {
  await Promise.all([
    waitObjectTree(viewer),   // 인스턴스 트리
    waitPropertyDb(viewer),   // 프로퍼티 DB
    waitGeometry(viewer)      // 지오메트리
  ]);
  await waitIdle(60);
}

// ── [추가] 카메라 포커싱(=fitToView 포함) 후 안정화까지 대기
async function focusCameraAndWait(viewer) {
  return new Promise((resolve) => {
    const onCam = () => {
      try { viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, onCam); } catch {}
      // 한 프레임 더 밀어서 렌더 파이프라인 안정화
      requestAnimationFrame(() => resolve());
    };
    viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, onCam, { once: true });
    // reset 내부에서 fitToView 호출: 카메라 이동 이벤트를 트리거
    resetViewerInputAndCamera(viewer);
  });
}

function onceViewer(viewer, type) {
  return new Promise((resolve) => {
    const h = () => { viewer.removeEventListener(type, h); resolve(); };
    viewer.addEventListener(type, h);
  });
}
function hasObjectTree(viewer) {
  return !!viewer.model?.getData?.()?.instanceTree;
}
async function waitObjectTree(viewer) {
  if (hasObjectTree(viewer)) return;
  await onceViewer(viewer, Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT);
}
async function waitGeometry(viewer, timeoutMs = 180000) {
  await new Promise((resolve) => {
    let done = false;
    const h = () => {
      if (done) return;
      done = true;
      try { viewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, h); } catch {}
      resolve();
    };
    viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, h, { once: true });
    setTimeout(h, timeoutMs);
  });
}
function waitIdle(timeout = 60) {
  return new Promise((resolve) => {
    if (typeof window.requestIdleCallback === "function") {
      window.requestIdleCallback(() => resolve(), { timeout });
    } else {
      setTimeout(resolve, timeout);
    }
  });
}
// async function waitViewerReady(viewer) {
//   await waitObjectTree(viewer);
//   await waitGeometry(viewer);
//   await waitIdle(60);
// }

function initSidebarWidth() {
  const root = document.documentElement;
  const stored = parseInt(localStorage.getItem("sidebarWidthPx") || "0", 10);
  const maxNow = Math.max(SIDEBAR_MIN, window.innerWidth - PREVIEW_MIN);
  const initial = Number.isFinite(stored) && stored >= SIDEBAR_MIN
    ? Math.min(maxNow, stored)
    : Math.min(maxNow, SIDEBAR_DEFAULT);
  root.style.setProperty("--sidebar-width", initial + "px");
  return initial;
}

function resetViewerInputAndCamera(viewer) {
  try {
    const tc = viewer.toolController;
    if (tc?.isToolActivated?.("BoxSelectionTool")) tc.deactivateTool("BoxSelectionTool");
    viewer.setNavigationLock(false);
    const fallbackNav = viewer.impl?.is2d ? "pan" : "orbit";
    viewer.setActiveNavigationTool?.(fallbackNav);
    viewer.setSelectionMode(Autodesk.Viewing.SelectionMode.MIXED);
    viewer.clearSelection?.();
    if (!viewer.impl?.is2d) {
      viewer.navigation.setWorldUpVector(new THREE.Vector3(0, 0, 1), true);
      const bb = viewer.model?.getBoundingBox?.();
      if (bb) {
        const center = bb.getCenter(new THREE.Vector3());
        viewer.navigation.setPivotPoint(center);
        viewer.navigation.setTarget(center);
      }
    }
    viewer.fitToView?.();
  } catch (e) {
    console.warn("[init] resetViewerInputAndCamera failed:", e);
  }
}

/* ============================== */
window.__ALLOW_WBS_UPDATE = false;

const login = document.getElementById("login");
let taskData = [];

const SAMPLE_TASK_DATA = [
  {
    no: "1",
    selectOptions: ["시공", "가설", "철거"],
    selectedOption: "시공",
    title: "Task A",
    start: "2024-06-25",
    end: "2024-07-01",
    linkedObjects: [{ urn: "SAMPLE_URN", dbId: 1001, text: "벽체1" }],
    children: [
      {
        no: "1.1",
        selectOptions: ["시공", "가설", "철거"],
        selectedOption: "시공",
        title: "Subtask A1",
        start: "2024-06-26",
        end: "2024-06-30",
        linkedObjects: [{ urn: "SAMPLE_URN", dbId: 1002, text: "벽체2" }],
      },
    ],
  },
  { no: "2", selectOptions: ["시공", "가설", "철거"], selectedOption: "시공", title: "Task B", start: "", end: "", linkedObjects: [] },
];

function safeUrn(urn) { return urn.replace(/[^a-zA-Z0-9]/g, "_"); }
function fillUrnRecursive(task, defaultUrn) {
  if (Array.isArray(task.linkedObjects)) {
    task.linkedObjects.forEach((obj) => { if (!obj.urn) obj.urn = defaultUrn || window.CURRENT_MODEL_URN; });
  }
  if (Array.isArray(task.children)) {
    task.children.forEach((child) => fillUrnRecursive(child, defaultUrn));
  }
}

/* ============================== */
window.addEventListener("resize", _.throttle(() => {
  try {
    initSidebarWidth();
    window.viewer?.resize?.();
    window.viewer?.impl?.invalidate?.(true, true, true);
    // SAFE_MODE: 간트/WBS 렌더링 호출 없음
  } catch (e) {
    console.warn("[resize] redraw failed", e);
  }
}, 120));

/* ============================== */
(async function () {
  try {
    // 1) 로그인
    const resp = await fetch("/api/auth/profile", { credentials: "include" });
    if (!resp.ok) { window.location.replace("/api/auth/login"); return; }
    const user = await resp.json();
    login.innerText = `Logout (${user.name})`;
    login.onclick = () => {
      const iframe = document.createElement("iframe");
      iframe.style.visibility = "hidden";
      iframe.src = "https://accounts.autodesk.com/Authentication/LogOut";
      document.body.appendChild(iframe);
      iframe.onload = () => {
        window.location.replace("/api/auth/logout");
        document.body.removeChild(iframe);
      };
    };

    // 2) 레이아웃
    const Sidebar = document.getElementById("sidebar");
    const Header  = document.getElementById("header");
    const Preview = document.getElementById("preview");
    const sidebarResizer = document.getElementById("sidebar-resizer");
    const Loading = document.getElementById("loading");
    Sidebar.style.display = "";
    sidebarResizer.style.display = "";
    Preview.style.display = "";
    Header.style.display = "";
    Loading.style.display = "none";
    login.style.visibility = "visible";
    Sidebar.style.removeProperty("width");
    Preview.style.removeProperty("left");
    sidebarResizer.style.removeProperty("left");
    initSidebarWidth();

    // 3) 탭/뷰어
    initTabs("#sidebar");
    const viewerHost = document.getElementById("viewer-host");
    const viewer = await initViewer(viewerHost);
    window.viewer = viewer;
    disableViewerEscReset(viewer);

    // ProgressOverlay 관련은 모두 제외(주석)
    // ensureCss('/css/05-hec-progress-overlay.css'); await import('./viewer/hec.ProgressOverlay.js'); ...

    // panel2 리사이저도 잠시 제외 (레이아웃 루프 가능성 차단)
    // bindPanel2Resizer(viewer);

    // 입력/카메라 보정
    viewer.resize();
    viewer.impl?.invalidate?.(true, true, true);
    requestAnimationFrame(() => {
      try { viewer.resize(); viewer.impl?.invalidate?.(true, true, true); } catch {}
    });
    resetViewerInputAndCamera(viewer);

    requestAnimationFrame(() => {
      const sb = document.getElementById("sidebar");
      if (sb && sb.offsetWidth === 0) {
        document.documentElement.style.setProperty("--sidebar-width", SIDEBAR_DEFAULT + "px");
        viewer.resize();
        viewer.impl?.invalidate?.(true, true, true);
      }
    });

    // 4) 모델 선택
    initTree("#tree", async (versionId) => {
      // destroyTaskPanel() 호출도 생략: 패널2 건드리지 않음
      const urn = window.btoa(versionId).replace(/=/g, "");
      window.CURRENT_MODEL_URN = urn;
      window.CURRENT_MODEL_SAFE_URN = safeUrn(urn);

      // 기존 WBS 트리 있으면 파괴 후 비우기
      try { $.ui.fancytree.getTree("#wbs-tree")?.destroy(); } catch {}
      $("#wbs-group-content").empty();

      // Task 데이터 로딩은 하되, 패널은 만들지 않음
      taskData.length = 0;
      setSavedTaskData([]);
      await loadTaskDataIfExists();
      taskData.forEach((t) => fillUrnRecursive(t, urn));

      //교체

      const myToken = ++__MODEL_RUN_TOKEN;  // 이 호출 시점의 세션 토큰

      await loadModel(viewer, urn);
      await waitViewerReady(viewer);        // 트리+프로퍼티DB+지오메트리까지

      // ⚠️ 빠른 모델 전환 레이스 방지
      if (myToken !== __MODEL_RUN_TOKEN) return;

      // 카메라 포커싱이 실제로 끝날 때까지 대기 (fitToView → CAMERA_CHANGE_EVENT)
      await focusCameraAndWait(viewer);
      viewer.resize();

      // ⚠️ 여기서도 한 번 더 레이스 체크
      if (myToken !== __MODEL_RUN_TOKEN) return;

      // ─────────────────────────────────────────────
      // [STEP 3~6] ← 카메라 안정화 이후로 이동 (여기부터 패널/데이터 초기화 시작)
      // STEP 3: provider 생성 (모델 기반으로!)
      let wbsProvider = null;
      try {
        const PRIMARY = ["HEC.WBS","HEC.Level","HEC.Zone"];
        const { provider } = await buildWbsProviderLazy(viewer, {
          primaryOrder: PRIMARY,
          source: "all",
          bucketThreshold: 400,
          bucketSize: 200
        });
        // 중간에 모델이 바뀌었으면 중단
        if (myToken !== __MODEL_RUN_TOKEN) return;

        wbsProvider = provider;
        window.WBS_PROVIDER = provider;
        try {
          const roots = await provider.roots();
          console.log("[WBS] roots:", Array.isArray(roots) ? roots.length : roots);
        } catch (e) {
          console.warn("[WBS] roots() failed:", e);
        }
      } catch (e) {
        console.warn("[STEP 3] WBS provider failed:", e);
        wbsProvider = { __provider:true, roots:async()=>[], childrenByPath:async()=>[] };
      }

      // STEP 4: 워밍업 (아주 작게)
      try {
        if (wbsProvider) {
          const roots = await wbsProvider.roots();
          let q = roots.map(r => ({ path: [r.text], depth: 1 }));
          let c = 0;
          while (q.length && c < 200) {
            const { path, depth } = q.shift();
            if (depth >= 2) continue;
            const kids = await wbsProvider.childrenByPath(path);
            c += kids.length;
            kids.forEach(k => q.push({ path: [...path, k.text], depth: depth + 1 }));
          }
          console.log("[STEP 4] WBS warmup OK (depth<=2, cap<=200)");
        }
      } catch (e) {
        console.warn("[STEP 4] WBS warmup failed:", e);
      }

      // 중간 레이스 체크
      if (myToken !== __MODEL_RUN_TOKEN) return;

      // STEP 5: Fancytree 초기화
      try {
        await initWbsPanelWithFancytree(wbsProvider, {
          primaryOrder: ["HEC.WBS","HEC.Level","HEC.Zone"]
        });
        console.log("[STEP 5] WBS fancytree init OK");
        //현황 카운트 더블패스 (0 0 0도 '준비완료'로 인정)
        try {
          const tree = $.ui.fancytree.getTree("#wbs-tree");
          if (tree && window.__WBS_DEBUG?.ensureCountsForAllRoots) {
            //0이어도 준비 완료로 판단 (정의됐는지만 확인)
            if (!areRootCountsReady(tree)) {
              await waitIdle(120);
              await window.__WBS_DEBUG.ensureCountsForAllRoots(tree, wbsProvider);
            }
          }
        } catch (e) {
          console.warn("[WBS] ensureCounts double-pass failed:", e);
        }
      } catch (e) {
        console.warn("[STEP 5] WBS fancytree init failed:", e);
      }

      // STEP 6: 패널2 리사이저 바인딩
      try {
        bindPanel2Resizer(viewer);
        console.log("[STEP 6] panel2 resizer bound");
      } catch (e) {
        console.warn("[STEP 6] resizer bind failed:", e);
      }
      // ─────────────────────────────────────────────

      // Task 패널 (SAFE MODE 유지 시 현 상태로 OK)
      try {
        initTaskPanel(taskData);
        initTaskListButtons();
        console.log("[STEP 1] Task panel OK");
      } catch (e) {
        console.warn("[STEP 1] Task init failed:", e);
      }

      try {
        window.dispatchEvent(new Event("panel2-ready"));
        console.log("[STEP 2] panel2-ready dispatched");
      } catch (e) {
        console.warn("[STEP 2] panel2-ready failed:", e);
      }
    });

  } catch (err) {
    alert("Could not initialize the application. See console for more details.");
    console.error(err);
  }
})();

/* ============================== */
async function loadTaskDataIfExists() {
  try {
    const safeUrnVal = window.CURRENT_MODEL_SAFE_URN;
    const url = `/api/tasks?urn=${safeUrnVal}`;
    const resp = await fetch(url, { credentials: "include" });
    if (resp.ok) {
      const data = await resp.json();
      taskData.length = 0;
      if (Array.isArray(data) && data.length > 0) {
        data.forEach((item) => taskData.push(item));
        setSavedTaskData(taskData);
      } else {
        SAMPLE_TASK_DATA.forEach((item) => taskData.push(structuredClone(item)));
        setSavedTaskData(taskData);
      }
    } else {
      taskData.length = 0;
      SAMPLE_TASK_DATA.forEach((item) => taskData.push(structuredClone(item)));
      setSavedTaskData(taskData);
    }
  } catch (err) {
    taskData.length = 0;
    SAMPLE_TASK_DATA.forEach((item) => taskData.push(structuredClone(item)));
    setSavedTaskData(taskData);
    console.warn("task 데이터를 불러오지 못했습니다. 샘플로 초기화:", err);
  }
}
