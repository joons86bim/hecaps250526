function mapStatus(selectedOption) {
  return ({ "시공":"C", "가설":"T", "철거":"D" }[selectedOption] || selectedOption || "");
}

function persistTasksSnapshot(tasks) {
  const RAW  = window.CURRENT_MODEL_URN;
  const SAFE = window.CURRENT_MODEL_SAFE_URN;

  // 1) RAW URN으로 통일 + status 필드 보정
  const cloned = structuredClone(tasks);
  (function walk(arr){
    (arr || []).forEach(t => {
      if (t.selectedOption && !t.status) t.status = mapStatus(t.selectedOption);
      (t.linkedObjects || []).forEach(o => {
        o.urn = RAW;                    // ❗RAW로 강제 통일 (SAFE 아님)
        if (o.dbId != null) o.dbId = Number(o.dbId);
      });
      if (t.children) walk(t.children);
    });
  })(cloned);

  // 2) RAW/SAFE 두 키 모두에 동일 스냅샷 저장 (키 미스까지 봉쇄)
  const payload = JSON.stringify(cloned);
  try { localStorage.setItem(`hec:tasks:${RAW}`,  payload); } catch {}
  try { localStorage.setItem(`hec:tasks:${SAFE}`, payload); } catch {}

  // 3) 전역에도 주입 (matrix-index가 메모리 경로를 쓸 때 대비)
  window.__SAVED_TASKS = cloned;
  try { setSavedTaskData(cloned); } catch {}

  console.log("[persistTasksSnapshot] saved to RAW & SAFE keys. count =", cloned.length);
}