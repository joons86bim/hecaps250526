// /wwwroot/js/main.js  — WBS 카운팅/색칠 첫 프레임 0 방지 (FINAL, debug.getCounts까지 브릿지)

import { initTabs } from "./sidebar/init-tabs.js";
import { initTree } from "./sidebar/init-tree.js";
import { initViewer, loadModel } from "./viewer/init-viewer.js";
import { buildWbsProviderLazy } from "./sidebar/task-wbs/wbs/loader.js";
import { bindPanel2Resizer } from "./sidebar/task-wbs/layout/panel-resizer.js";

import {
  initMatrix,
  bulkEnsureForVisible,
  computePathState,
  getCounts,
  markTasksChanged,
} from "./sidebar/task-wbs/core/matrix-index.js";

import { toKey } from "./sidebar/task-wbs/core/path-key.js";

import {
  initTaskPanel,
  initTaskListButtons,
  setSavedTaskData,
  disableViewerEscReset,
  initWbsPanelWithFancytree,
} from "./sidebar/index.js";
// import { patch } from "@mui/material";

// === 디버그용 전역 노출
try {
  window.__WBS_DEBUG = window.__WBS_DEBUG || {};
  window.getCounts = getCounts;
  window.markTasksChanged = markTasksChanged;
} catch (e) {
  console.warn("[debug expose] failed:", e);
}

/* ============================== */
/* 레이아웃 / 공통 설정 */
const SIDEBAR_MIN = 360;
const SIDEBAR_DEFAULT = 900;
const PREVIEW_MIN = 520;

// 전역 폴백 저장소
window.__FA_FALLBACK_BY_KEY = Object.create(null);

function initSidebarWidth() {
  const root = document.documentElement;
  const stored = parseInt(localStorage.getItem("sidebarWidthPx") || "0", 10);
  const maxNow = Math.max(SIDEBAR_MIN, window.innerWidth - PREVIEW_MIN);
  const initial = Number.isFinite(stored) && stored >= SIDEBAR_MIN
    ? Math.min(maxNow, stored)
    : Math.min(maxNow, SIDEBAR_DEFAULT);
  root.style.setProperty("--sidebar-width", initial + "px");
  return initial;
}

function resetViewerInputAndCamera(viewer) {
  try {
    const tc = viewer.toolController;
    if (tc?.isToolActivated?.("BoxSelectionTool")) tc.deactivateTool("BoxSelectionTool");
    viewer.setNavigationLock(false);
    const fallbackNav = viewer.impl?.is2d ? "pan" : "orbit";
    viewer.setActiveNavigationTool?.(fallbackNav);
    viewer.setSelectionMode(Autodesk.Viewing.SelectionMode.MIXED);
    viewer.clearSelection?.();
    if (!viewer.impl?.is2d) {
      viewer.navigation.setWorldUpVector(new THREE.Vector3(0, 0, 1), true);
      const bb = viewer.model?.getBoundingBox?.();
      if (bb) {
        const center = bb.getCenter(new THREE.Vector3());
        viewer.navigation.setPivotPoint(center);
        viewer.navigation.setTarget(center);
      }
    }
    viewer.fitToView?.();
  } catch (e) {
    console.warn("[init] resetViewerInputAndCamera failed:", e);
  }
}

/* ==============================
   WBS FancyTree 셀 색칠(첫 로딩 보장)
   ============================== */

// 1) 셀 색 팔레트
const __WBS_COLOR = {
  C:  "#10b981", // 시공/완료
  T:  "#f59e0b", // 가설/진행
  D:  "#ef4444", // 철거/해체
  TD: "#7c3aed"  // 동시/복합
};

// 2) CSS 주입 (행/타이틀 배경 + 좌측 보더)
function injectWbsCellCss() {
  if (document.getElementById("wbs-cell-style")) return;
  const css = `
    .fancytree-node .fancytree-title {
      border-left: 4px solid transparent;
      padding-left: 8px;
      border-radius: 6px;
      transition: background-color .15s ease, border-color .15s ease;
    }
    .wbsCell--C  .fancytree-title { background: ${__WBS_COLOR.C}1a; border-left-color: ${__WBS_COLOR.C}; }
    .wbsCell--T  .fancytree-title { background: ${__WBS_COLOR.T}1a; border-left-color: ${__WBS_COLOR.T}; }
    .wbsCell--D  .fancytree-title { background: ${__WBS_COLOR.D}1a; border-left-color: ${__WBS_COLOR.D}; }
    .wbsCell--TD .fancytree-title { background: ${__WBS_COLOR.TD}1a; border-left-color: ${__WBS_COLOR.TD}; }
  `.trim();
  const s = document.createElement("style");
  s.id = "wbs-cell-style";
  s.textContent = css;
  document.head.appendChild(s);
}

// 3) 노드 → 경로/키 → 카운트
function __wbs_countsForNode(node) {
  const D = window.__WBS_DEBUG || {};
  // __path를 심어뒀으면 우선 사용
  const path = node.data?.__path || node.getKeyPath().split("/").filter(Boolean);
  const k = D.toKey ? D.toKey(path) : (window.toKey ? window.toKey(path) : null);
  if (!k) return { total:0,c:0,t:0,d:0,td:0 };
  const c = D.getCounts ? D.getCounts(k) : {};
  return { total: c.total|0, c:c.c|0, t:c.t|0, d:c.d|0, td:c.td|0 };
}

// 4) 셀 클래스 계산(가장 많은 상태 우선, td>0이면 TD 우선)
function __wbs_classForCounts(cnt) {
  if (!cnt) return null;
  if ((cnt.td|0) > 0) return "wbsCell--TD";
  const pairs = [
    ["wbsCell--C",  cnt.c|0],
    ["wbsCell--T",  cnt.t|0],
    ["wbsCell--D",  cnt.d|0],
  ];
  pairs.sort((a,b)=>b[1]-a[1]);
  return pairs[0][1] > 0 ? pairs[0][0] : null;
}

// 5) 노드 하나 색칠
function __wbs_colorizeNode(node) {
  const $ = window.jQuery || window.$;
  if (!$ || !node || !node.span || node.isRoot?.()) return;

  const $li = $(node.li);
  const classes = ["wbsCell--C","wbsCell--T","wbsCell--D","wbsCell--TD"];
  $li.removeClass(classes.join(" "));

  const cnt = __wbs_countsForNode(node);
  const cls = __wbs_classForCounts(cnt);
  if (cls) $li.addClass(cls);
}

// 6) 트리 전체 색칠
function __wbs_colorizeTree(tree) {
  if (!tree) return;
  tree.visit(__wbs_colorizeNode);
}

// 7) Fancytree 렌더 훅 설치(첫 로딩 프레임 보장)
function installWbsCellColorizer(tree) {
  if (!tree || tree.__wbsCellColorizerInstalled) return;
  injectWbsCellCss();

  // renderNode 체이닝
  const prev = tree.options.renderNode;
  tree.$div.fancytree("option", "renderNode", function(event, data) {
    if (typeof prev === "function") prev.call(this, event, data);
    try { __wbs_colorizeNode(data.node); } catch {}
  });

  // 첫 프레임 2회 보장(렌더 직후 + 다음 프레임)
  try { __wbs_colorizeTree(tree); } catch {}
  requestAnimationFrame(() => { try { __wbs_colorizeTree(tree); } catch {} });

  // 디버그 버튼
  window.DEBUG_WBS = window.DEBUG_WBS || {};
  window.DEBUG_WBS.repaint = () => {
    try { __wbs_colorizeTree($.ui.fancytree.getTree("#wbs-tree")); } catch {}
  };

  tree.__wbsCellColorizerInstalled = true;
}

/* ============================== */
/* 뷰어 준비 대기 유틸 */
function onceViewer(viewer, type) {
  return new Promise((resolve) => {
    const h = () => { try { viewer.removeEventListener(type, h); } catch {} ; resolve(); };
    viewer.addEventListener(type, h);
  });
}
function hasObjectTree(viewer) {
  return !!viewer.model?.getData?.()?.instanceTree;
}
async function waitObjectTree(viewer) {
  if (hasObjectTree(viewer)) return;
  await onceViewer(viewer, Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT);
}
async function waitGeometry(viewer, timeoutMs = 180000) {
  await new Promise((resolve) => {
    let done = false;
    const h = () => {
      if (done) return;
      done = true;
      try { viewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, h); } catch {}
      resolve();
    };
    viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, h, { once: true });
    setTimeout(h, timeoutMs);
  });
}
async function waitPropertyDb(viewer, timeoutMs = 120000) {
  try {
    if (viewer?.model?.getPropertyDb?.()) return;
  } catch {}
  await new Promise((resolve) => {
    let done = false;
    const h = () => {
      if (done) return;
      done = true;
      try { viewer.removeEventListener(Autodesk.Viewing.PROPERTY_DB_CREATED_EVENT, h); } catch {}
      resolve();
    };
    viewer.addEventListener(Autodesk.Viewing.PROPERTY_DB_CREATED_EVENT, h, { once: true });
    setTimeout(h, timeoutMs);
  });
}
function waitIdle(timeout = 60) {
  return new Promise((resolve) => {
    if (typeof window.requestIdleCallback === "function") {
      window.requestIdleCallback(() => resolve(), { timeout });
    } else {
      setTimeout(resolve, timeout);
    }
  });
}
async function waitViewerReady(viewer) {
  await Promise.all([
    waitObjectTree(viewer),
    waitPropertyDb(viewer),
    waitGeometry(viewer),
  ]);
  await waitIdle(60);
}
async function focusCameraAndWait(viewer) {
  return new Promise((resolve) => {
    const onCam = () => {
      try { viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, onCam); } catch {}
      requestAnimationFrame(() => resolve());
    };
    viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, onCam, { once: true });
    resetViewerInputAndCamera(viewer);
  });
}

/* ============================== */
/* 태스크/URN 유틸 */
function safeUrn(urn) { return urn.replace(/[^a-zA-Z0-9]/g, "_"); }
function fillUrnRecursive(task, defaultUrn) {
  if (Array.isArray(task.linkedObjects)) {
    task.linkedObjects.forEach((o) => { if (!o.urn) o.urn = defaultUrn || window.CURRENT_MODEL_URN; });
  }
  if (Array.isArray(task.children)) {
    task.children.forEach((child) => fillUrnRecursive(child, defaultUrn));
  }
}
function persistTasksSnapshot(tasks) {
  const RAW  = window.CURRENT_MODEL_URN;
  const SAFE = window.CURRENT_MODEL_SAFE_URN;
  if (!RAW || !SAFE) return;
  try {
    const json = JSON.stringify(tasks || []);
    localStorage.setItem(`hec:tasks:${RAW}`, json);
    localStorage.setItem(`hec:tasks:${SAFE}`, json);
    window.__SAVED_TASKS = (tasks || []);
    console.log("[persistTasksSnapshot] saved to RAW & SAFE keys. count =", window.__SAVED_TASKS.length);
  } catch (e) {
    console.warn("[persistTasksSnapshot] failed:", e);
  }
}

/* ============================== */
/* WBS 키/맵 사전구축 + 집계 싱크 */
async function seedDbIdMappings(provider, { maxDepth = 3, cap = 6000 } = {}) {
  const roots = await provider.roots().catch(() => []) || [];
  const q = roots.map(r => ({ path: [r.text], depth: 0 }));
  let visited = 0;
  while (q.length && visited < cap) {
    const { path, depth } = q.shift();
    try { provider.getDbIdsForPath?.(path, { includeDescendants: true, allowUnbuilt: true }); } catch {}
    if (depth < maxDepth) {
      let kids = [];
      try { kids = await provider.childrenByPath(path) || []; } catch {}
      visited += kids.length;
      for (const ch of kids) {
        const np = ch.__path || [...path, ch.text];
        q.push({ path: np, depth: depth + 1 });
      }
    }
  }
}

async function collectKeysForRoots(provider, { maxDepth = 3, cap = 6000 } = {}) {
  const roots = (await provider.roots().catch(() => [])) || [];
  const q = roots.map(r => ({ path: [r.text], depth: 0 }));
  const keys = new Set();
  let seen = 0;
  while (q.length && seen < cap) {
    const { path, depth } = q.shift();
    keys.add(toKey(path));
    let kids = [];
    try { kids = await provider.childrenByPath(path) || []; } catch {}
    seen += kids.length;
    if (depth < maxDepth) {
      for (const ch of kids) {
        const np = ch.__path || [...path, ch.text];
        q.push({ path: np, depth: depth + 1 });
      }
    }
  }
  return Array.from(keys);
}

/* ==============================
   WBS 셀 배지/색상 렌더러
   ============================== */

// 배지 색상 팔레트(트리용)
const __WBS_BADGE_COLORS = {
  C:  "#0a9d5a", // 시공/완료
  T:  "#f2c14e", // 가설/진행
  D:  "#d72638", // 철거
  TD: "#7a5cff"  // 동시/복합
};

// (1) CSS 주입
function injectWbsBadgeCss() {
  if (document.getElementById("wbs-badge-style")) return;
  const css = `
    .wbs-badges { display:inline-flex; gap:6px; margin-left:8px; vertical-align:middle; }
    .wbs-badge {
      display:inline-block; min-width:18px; padding:0 6px; height:18px; line-height:18px;
      font-size:11px; font-weight:600; border-radius:9px; color:#fff; text-align:center;
      box-shadow:inset 0 -1px rgba(0,0,0,0.15);
    }
    .wbs-badge.hidden { display:none; }
    .wbs-badge.C  { background:${__WBS_BADGE_COLORS.C}; }
    .wbs-badge.T  { background:${__WBS_BADGE_COLORS.T}; color:#333; }
    .wbs-badge.D  { background:${__WBS_BADGE_COLORS.D}; }
    .wbs-badge.TD { background:${__WBS_BADGE_COLORS.TD}; }
  `.trim();
  const s = document.createElement("style");
  s.id = "wbs-badge-style";
  s.textContent = css;
  document.head.appendChild(s);
}

// (2) 노드 → 경로 계산
function getPathForNode(node) {
  // fancytree root는 표시노드가 아니니 제외
  const path = [];
  let n = node;
  while (n && !n.isRoot()) {
    path.unshift(n.title);
    n = n.parent;
  }
  // initWbsPanelWithFancytree에서 __path를 심어줬다면 그걸 우선 사용
  return node.data?.__path || path;
}

// (3) 카운트 가져오기 (브릿지된 getCounts 사용)
function getCountsForPath(path) {
  const D = window.__WBS_DEBUG || {};
  const k = (D.toKey ? D.toKey(path) : (window.toKey ? window.toKey(path) : null));
  if (!k) return { total:0, c:0, t:0, d:0, td:0 };
  const c = D.getCounts ? D.getCounts(k) : {};
  return {
    total: c.total|0, c: c.c|0, t: c.t|0, d: c.d|0, td: c.td|0
  };
}

// (4) 노드 하나의 배지 UI를 만들거나 갱신
function ensureNodeBadges(node) {
  const $ = window.jQuery || window.$;
  if (!$ || !node || !node.span) return;

  const path = getPathForNode(node);
  const counts = getCountsForPath(path);

  const $span = $(node.span);                   // .fancytree-node
  const $title = $span.find(".fancytree-title");// 타이틀 스팬
  if ($title.length === 0) return;

  let $badges = $span.find(".wbs-badges");
  if ($badges.length === 0) {
    $badges = $("<span class='wbs-badges'/>").insertAfter($title);
    // 배지 4종 생성(C/T/D/TD)
    $badges.append("<span class='wbs-badge C'  data-k='c'>0</span>");
    $badges.append("<span class='wbs-badge T'  data-k='t'>0</span>");
    $badges.append("<span class='wbs-badge D'  data-k='d'>0</span>");
    $badges.append("<span class='wbs-badge TD' data-k='td'>0</span>");
  }

  const setVal = (k, v) => {
    const b = $badges.find(`.wbs-badge.${k}`);
    if (b.length) {
      b.text(v|0);
      b.toggleClass("hidden", (v|0) === 0);
    }
  };

  setVal("C", counts.c);
  setVal("T", counts.t);
  setVal("D", counts.d);
  setVal("TD", counts.td);
}

// (5) 트리 전체 리프레시
function colorizeWbsTree(tree) {
  if (!tree) return;
  tree.visit(node => ensureNodeBadges(node));
}

// (6) 렌더 훅 설치(트리 리렌더 때마다 자동 갱신)
function installWbsBadgeRenderer(tree) {
  if (!tree) return;
  injectWbsBadgeCss();

  // renderNode 훅 덮어쓰기(기존 훅이 있으면 체이닝)
  const prev = tree.options.renderNode;
  tree.$div.fancytree("option", "renderNode", function(event, data) {
    if (typeof prev === "function") prev.call(this, event, data);
    // 각 노드 타이틀 렌더 후 배지 갱신
    try { ensureNodeBadges(data.node); } catch {}
  });

  // 초기 2회 강제 갱신(첫 프레임/비동기 안전)
  try { colorizeWbsTree(tree); } catch {}
  requestAnimationFrame(() => { try { colorizeWbsTree(tree); } catch {} });
}

// === 폴백 계산기
// REPLACE the whole buildStatusSetsFromTasks function
function calcCountsForPath(provider, path, S) {
  let ids = [];
  try {
    ids = provider.getDbIdsForPath(path, { includeDescendants:true, allowUnbuilt:true }) || [];
  } catch {}
  if (!ids.length) return { total:0, c:0, t:0, d:0, td:0 };
  const set = new Set(ids);
  let c=0,t=0,d=0,td=0;
  for (const id of set) {
    if (S.C.has(id)) c++;
    if (S.T.has(id)) t++;
    if (S.D.has(id)) d++;
    if (S.TD.has(id)) td++;
  }
  return { total:set.size, c,t,d,td };
}

function keyFromPath(path) {
  const D = window.__WBS_DEBUG;
  return (D?.toKey ? D.toKey(path) : toKey(path));
}

async function buildFallbackMap(provider, { maxDepth=3, cap=6000 } = {}) {
  window.__FA_FALLBACK_BY_KEY = Object.create(null);
  const tasks = window.__SAVED_TASKS || [];
  const S = buildStatusSetsFromTasks(tasks);

  const roots = (await provider.roots().catch(()=>[])) || [];
  const q = roots.map(r => ({ path:[r.text], depth:0 }));
  let seen = 0;

  while (q.length && seen < cap) {
    const { path, depth } = q.shift();
    const key = keyFromPath(path);
    window.__FA_FALLBACK_BY_KEY[key] = calcCountsForPath(provider, path, S);

    let kids = [];
    try { kids = await provider.childrenByPath(path) || []; } catch {}
    seen += kids.length;
    if (depth < maxDepth) {
      for (const ch of kids) q.push({ path: (ch.__path || [...path, ch.text]), depth: depth+1 });
    }
  }
  console.log("[FA] fallback map ready (keys =",
              Object.keys(window.__FA_FALLBACK_BY_KEY).length, ")");
}

// === ★ 핵심: getCounts를 (글로벌 + __WBS_DEBUG) 모두 폴백 참조로 브릿지
function patchGetCountsToUseFallback() {
  const D = window.__WBS_DEBUG;
  const fbMap = () => window.__FA_FALLBACK_BY_KEY || Object.create(null);

  // patch global getCounts (존재하지 않아도 무해)
  if (!window.__FA_BRIDGED_GLOBAL) {
    const origGlobal = window.getCounts;
    window.getCounts = function (k) {
      const r = origGlobal ? (origGlobal(k) || {}) : {};
      const sum = ((r.c|0)+(r.t|0)+(r.d|0)+(r.td|0));
      if (sum > 0) return r;
      const fb = fbMap()[k];
      if (fb) { const total = Math.max((r.total|0), (fb.total|0)); return { total, c:fb.c|0, t:fb.t|0, d:fb.d|0, td:fb.td|0 }; }
      return r;
    };
    window.__FA_BRIDGED_GLOBAL = true;
  }

  // patch __WBS_DEBUG.getCounts (실제 렌더/로그는 이걸 씀)
  if (D?.getCounts && !D.__patchedForFallback) {
    const orig = D.getCounts.bind(D);
    D.__origGetCounts = orig;
    D.getCounts = function (k) {
      const r = orig(k) || {};
      const sum = ((r.c|0)+(r.t|0)+(r.d|0)+(r.td|0));
      if (sum > 0) return r;
      const fb = fbMap()[k];
      if (fb) { const total = Math.max((r.total|0), (fb.total|0)); return { total, c:fb.c|0, t:fb.t|0, d:fb.d|0, td:fb.td|0 }; }
      return r;
    };
    D.__patchedForFallback = true;
  }

  console.log("[FA] getCounts bridged (global+debug)");
}

async function installFallbackCounts(tree, provider) {
  const tasks = window.__SAVED_TASKS || [];
  if (!tree || !provider || !tasks.length) return;

  const S = buildStatusSetsFromTasks(tasks);
  console.log("[FA] sets size =", { C:S.C.size, T:S.T.size, D:S.D.size, TD:S.TD.size });

  const visit = (node, path) => {
    const counts = calcCountsForPath(provider, path, S);
    node.data = node.data || {};
    node.data.__aggCounts = counts;
    const k = keyFromPath(path);
    window.__FA_FALLBACK_BY_KEY[k] = counts;
    (node.children||[]).forEach(ch => {
      const next = ch.data?.__path || [...path, ch.title];
      visit(ch, next);
    });
  };

  const root = tree.getRootNode();
  (root.children||[]).forEach(n => visit(n, n.data?.__path || [n.title]));

  try { tree.render(true, true); } catch {}
  requestAnimationFrame(() => { try { tree.render(true, true); } catch {} });
  console.log("[FA] fallback counts installed");
}

async function hardSyncCountsForRoots(tree, provider, { cap = 12000 } = {}) {
  if (!tree || !provider || !window.__WBS_DEBUG) return;
  const D = window.__WBS_DEBUG;

  const roots = tree.getRootNode().children || [];
  if (!roots.length) return;

  const all = [];
  for (const r of roots) {
    const p = r.data?.__path || [r.title];
    try {
      const ks = await D.collectAllPathKeys(provider, p, cap);
      all.push(...ks);
    } catch (e) {
      console.warn("[hardSync] collectAllPathKeys failed for", p, e);
    }
  }
  const uniq = Array.from(new Set(all));
  if (!uniq.length) return;

  try {
    await D.bulkEnsureForVisible(uniq);
    uniq.forEach(D.computePathState);
  } catch (e) {
    console.warn("[hardSync] ensure/compute failed:", e);
  }

  try {
    for (const r of roots) {
      const k = r.data?.pathKey;
      const c = k && D.getCounts?.(k);
      console.log("[hardSync] root:", r.title, "counts=", c);
    }
  } catch {}

  try {
    tree.render(true, true);
    requestAnimationFrame(() => { try { tree.render(true, true); } catch {} });
  } catch (e) {
    console.warn("[hardSync] render failed:", e);
  }
}

// === [ADD] 색칠 팔레트 & 도우미 ===
const __WBS_COLORS = {
  C:  new THREE.Vector4(0.00, 0.62, 0.35, 0.8),  // 시공(완료) : 초록
  T:  new THREE.Vector4(0.96, 0.76, 0.26, 0.8),  // 가설/진행  : 노랑
  D:  new THREE.Vector4(0.84, 0.15, 0.16, 0.8),  // 철거       : 빨강
  TD: new THREE.Vector4(0.55, 0.35, 0.95, 0.8),  // 동시/복합  : 보라
};

// (a) dbId → 최종상태 세트 만들기 (이미 파일에 동일 함수가 있으면 이걸로 교체)
function buildStatusSetsFromTasks(tasks) {
  const stateById = new Map();
  const norm = (raw) => {
    if (!raw) return "";
    const s = String(raw).trim().toUpperCase();
    if (s.includes("시공") || s === "완료") return "C";
    if (s.includes("가설") || s === "진행" || s === "임시") return "T";
    if (s.includes("철거") || s === "해체") return "D";
    if (s === "TD" || s.includes("동시") || s.includes("복합")) return "TD";
    if (s.startsWith("C")) return "C";
    if (s.startsWith("T")) return "T";
    if (s.startsWith("D")) return "D";
    if (s.startsWith("X")) return "TD";
    return "";
  };
  const prio = { C:3, TD:2, D:1, T:0, "":-1 };
  function apply(id, sNew) {
    if (!id || !sNew) return;
    const cur = stateById.get(id);
    if (!cur) { stateById.set(id, sNew); return; }
    if ((cur === "T" && sNew === "D") || (cur === "D" && sNew === "T")) {
      stateById.set(id, "TD"); return;
    }
    stateById.set(id, prio[sNew] > prio[cur] ? sNew : cur);
  }
  (function walk(arr, inherited="") {
    (arr||[]).forEach(t => {
      const sTask = norm(t.status || t.selectedOption || inherited);
      (t.linkedObjects||[]).forEach(o => apply(o.dbId, norm(o.status || o.phase || sTask)));
      if (t.children) walk(t.children, sTask);
    });
  })(tasks);
  const S = { C:new Set(), T:new Set(), D:new Set(), TD:new Set() };
  for (const [id, s] of stateById.entries()) if (S[s]) S[s].add(id);
  return S;
}

// (b) 실제 색칠
function paintByTasks(viewer) {
  try {
    const model = viewer?.model;
    if (!model) return;
    const tasks = window.__SAVED_TASKS || [];
    const S = buildStatusSetsFromTasks(tasks);

    // 테마 초기화 후 색칠
    viewer.clearThemingColors(model);
    try { viewer.setGhosting(false); } catch {}

    const paintSet = (ids, color) => ids && ids.forEach(id => {
      // recursive=true 로 하위 프래그먼트까지 적용
      viewer.setThemingColor(id, color, model, true);
    });

    paintSet(S.C,  __WBS_COLORS.C);
    paintSet(S.T,  __WBS_COLORS.T);
    paintSet(S.D,  __WBS_COLORS.D);
    paintSet(S.TD, __WBS_COLORS.TD);

    viewer.impl.invalidate(true, true, true);
  } catch (e) {
    console.warn("[paintByTasks] failed:", e);
  }
}

// (c) 디버그 수동 리페인트 훅
window.DEBUG_WBS = window.DEBUG_WBS || {};
window.DEBUG_WBS.repaint = () => paintByTasks(window.viewer);

/* ============================== */
/* 태스크 로딩 (API) */
const SAMPLE_TASK_DATA = [
  {
    no: "1",
    title: "Task A",
    selectedOption: "시공",
    start: "2024-06-25",
    end: "2024-07-01",
    linkedObjects: [{ urn: "SAMPLE_URN", dbId: 1001, text: "벽체1" }],
    children: [
      {
        no: "1.1",
        title: "Subtask A1",
        selectedOption: "시공",
        start: "2024-06-26",
        end: "2024-06-30",
        linkedObjects: [{ urn: "SAMPLE_URN", dbId: 1002, text: "벽체2" }],
      },
    ],
  },
  { no: "2", title: "Task B", selectedOption: "시공", start: "", end: "", linkedObjects: [] },
];

async function fetchTaskDataForCurrentModel() {
  try {
    const safeUrnVal = window.CURRENT_MODEL_SAFE_URN;
    const url = `/api/tasks?urn=${safeUrnVal}`;
    const resp = await fetch(url, { credentials: "include" });
    if (resp.ok) {
      const data = await resp.json();
      if (Array.isArray(data) && data.length > 0) return data;
    }
  } catch (err) {
    console.warn("task 데이터를 불러오지 못했습니다. 샘플로 대체:", err);
  }
  return SAMPLE_TASK_DATA.map(x => structuredClone(x));
}

/* ============================== */
/* resize */
window.addEventListener("resize", _.throttle(() => {
  try {
    initSidebarWidth();
    window.viewer?.resize?.();
    window.viewer?.impl?.invalidate?.(true, true, true);
  } catch (e) {
    console.warn("[resize] redraw failed", e);
  }
}, 120));

/* ============================== */
/* main */
(async function () {
  try {
    // 1) 로그인
    const resp = await fetch("/api/auth/profile", { credentials: "include" });
    if (!resp.ok) { window.location.replace("/api/auth/login"); return; }
    const user = await resp.json();
    const login = document.getElementById("login");
    login.innerText = `Logout (${user.name})`;
    login.onclick = () => {
      const iframe = document.createElement("iframe");
      iframe.style.visibility = "hidden";
      iframe.src = "https://accounts.autodesk.com/Authentication/LogOut";
      document.body.appendChild(iframe);
      iframe.onload = () => {
        window.location.replace("/api/auth/logout");
        document.body.removeChild(iframe);
      };
    };

    // 2) 레이아웃
    const Sidebar = document.getElementById("sidebar");
    const Header  = document.getElementById("header");
    const Preview = document.getElementById("preview");
    const sidebarResizer = document.getElementById("sidebar-resizer");
    const Loading = document.getElementById("loading");
    Sidebar.style.display = "";
    sidebarResizer.style.display = "";
    Preview.style.display = "";
    Header.style.display = "";
    Loading.style.display = "none";
    login.style.visibility = "visible";
    Sidebar.style.removeProperty("width");
    Preview.style.removeProperty("left");
    sidebarResizer.style.removeProperty("left");
    initSidebarWidth();

    // 3) 탭/뷰어
    initTabs("#sidebar");
    const viewerHost = document.getElementById("viewer-host");
    const viewer = await initViewer(viewerHost);
    window.viewer = viewer;
    disableViewerEscReset(viewer);

    viewer.resize();
    viewer.impl?.invalidate?.(true, true, true);
    requestAnimationFrame(() => {
      try { viewer.resize(); viewer.impl?.invalidate?.(true, true, true); } catch {}
    });
    resetViewerInputAndCamera(viewer);

    requestAnimationFrame(() => {
      const sb = document.getElementById("sidebar");
      if (sb && sb.offsetWidth === 0) {
        document.documentElement.style.setProperty("--sidebar-width", SIDEBAR_DEFAULT + "px");
        viewer.resize();
        viewer.impl?.invalidate?.(true, true, true);
      }
    });

    // 4) 모델 선택
    initTree("#tree", async (versionId) => {
      const urn = window.btoa(versionId).replace(/=/g, ""); // RAW
      window.CURRENT_MODEL_URN = urn;
      window.CURRENT_MODEL_SAFE_URN = safeUrn(urn);

      // 기존 WBS 파괴
      try { $.ui.fancytree.getTree("#wbs-tree")?.destroy(); } catch {}
      $("#wbs-group-content").empty();

      // (A) 모델 로드 & 안정화
      await loadModel(viewer, urn);
      await waitViewerReady(viewer);
      await focusCameraAndWait(viewer);
      viewer.resize();

      // (B) WBS Provider 생성
      let wbsProvider = null;
      try {
        const PRIMARY = ["HEC.WBS","HEC.Level","HEC.Zone"];
        const { provider } = await buildWbsProviderLazy(viewer, {
          primaryOrder: PRIMARY,
          source: "all",
          bucketThreshold: 400,
          bucketSize: 200,
        });
        wbsProvider = provider;
        window.WBS_PROVIDER = provider;
        const roots = await provider.roots();
        console.log("[WBS] roots:", Array.isArray(roots) ? roots.length : roots);
      } catch (e) {
        console.warn("[STEP 3] WBS provider failed:", e);
        wbsProvider = { __provider:true, roots:async()=>[], childrenByPath:async()=>[] };
        window.WBS_PROVIDER = wbsProvider;
      }

      // (C) 태스크 로드 → URN 통일 → 스냅샷 영속
      const taskData = await fetchTaskDataForCurrentModel();
      taskData.forEach((t) => fillUrnRecursive(t, urn));
      persistTasksSnapshot(taskData);

      // (D) provider 맵 사전 구축 → 매트릭스 초기화 → 태스크 주입
      await seedDbIdMappings(wbsProvider, { maxDepth: 3, cap: 6000 });
      await initMatrix({ primaryOrder:["HEC.WBS","HEC.Level","HEC.Zone"], provider: wbsProvider });
      setSavedTaskData(taskData);
      console.log("[reply] setSavedTaskData done");

      // 추가:색칠
      // paintByTasks(viewer);

      // (E) 폴백 맵 준비 + getCounts 브릿지(★ 반드시 선행)
      await buildFallbackMap(wbsProvider, { maxDepth:3, cap:6000 });
      patchGetCountsToUseFallback(); // global + __WBS_DEBUG 모두

      [0, 100, 400].forEach(t=> setTimeout(patchGetCountsToUseFallback, t));

      // (F) 선계산: 루트~깊이3 키 보장/계산 → 이때부터 폴백 경유로 c/t/d/td가 나온다
      const preKeys = await collectKeysForRoots(wbsProvider, { maxDepth: 3, cap: 6000 });
      await bulkEnsureForVisible(preKeys);
      preKeys.forEach(computePathState);

      // (G) 확인 로그
      try {
        const roots = (await wbsProvider.roots()) || [];
        console.log("[precompute] roots=", roots.length);
        roots.forEach(r => {
          const k = toKey([r.text]);
          console.log("[precompute after MARK]", r.text, getCounts(k));
        });
      } catch {}

      // (H) FancyTree 초기화 → 폴백 주입 → 하드싱크
      try {
        await initWbsPanelWithFancytree(wbsProvider, { primaryOrder: ["HEC.WBS","HEC.Level","HEC.Zone"] });
        console.log("[STEP 5] WBS fancytree init OK");

        patchGetCountsToUseFallback();

        installWbsCellColorizer(tree);
        //색칠 다시
        // paintByTasks(viewer);

        const tree = $.ui.fancytree.getTree("#wbs-tree");
        await installFallbackCounts(tree, wbsProvider);

        await waitIdle(60);
        await hardSyncCountsForRoots(tree, wbsProvider, { cap: 12000 });

        patchGetCountsToUseFallback();
        installWbsBadgeRenderer(tree);
        //색칠 다다시
        try { colorizeWbsTree(tree); } catch {}

      } catch (e) {
        console.warn("[STEP 5] WBS fancytree init failed:", e);
      }

      // window.addEventListener("panel2-ready", () => {
      //   setTimeout(patchGetCountsToUseFallback, 0);
      // });

      // 나머지 패널들
      try {
        bindPanel2Resizer(viewer);
        console.log("[STEP 6] panel2 resizer bound");
      } catch (e) {
        console.warn("[STEP 6] resizer bind failed:", e);
      }

      try {
        initTaskPanel(taskData);
        initTaskListButtons();
        console.log("[STEP 1] Task panel OK");
      } catch (e) {
        console.warn("[STEP 1] Task init failed:", e);
      }

      try {
        window.dispatchEvent(new Event("panel2-ready"));
        console.log("[STEP 2] panel2-ready dispatched");
      } catch (e) {
        console.warn("[STEP 2] panel2-ready failed:", e);
      }
    });

  } catch (err) {
    alert("Could not initialize the application. See console for more details.");
    console.error(err);
  }
})();

/* ============================== */
/* 디버그 유틸 */
window.DEBUG_WBS = window.DEBUG_WBS || {};
window.DEBUG_WBS.dumpExpectedVsCurrent = async function () {
  try {
    const provider = window.WBS_PROVIDER;
    const D = window.__WBS_DEBUG;
    const tasks = window.__SAVED_TASKS || [];
    if (!provider) { console.warn("WBS_PROVIDER 없음"); return; }

    const dbC = new Set(), dbT = new Set(), dbD = new Set(), dbTD = new Set();
    (function walk(arr){
      (arr || []).forEach(t => {
        const s = (t.status || t.selectedOption || "").toUpperCase().slice(0,1);
        (t.linkedObjects||[]).forEach(o => {
          if (s === "C") dbC.add(o.dbId);
          else if (s === "T") dbT.add(o.dbId);
          else if (s === "D") dbD.add(o.dbId);
          else if (s === "X") dbTD.add(o.dbId);
        });
        if (t.children) walk(t.children);
      });
    })(tasks);

    const roots = await provider.roots();
    const rows = [];
    for (const r of roots) {
      const path = [r.text];
      const ids = provider.getDbIdsForPath(path, { includeDescendants:true, allowUnbuilt:true }) || [];
      const set = new Set(ids);
      const exp = { root: r.text, total: ids.length, c: 0, t: 0, d: 0, td: 0 };
      for (const id of set) {
        if (dbC.has(id)) exp.c++;
        if (dbT.has(id)) exp.t++;
        if (dbD.has(id)) exp.d++;
        if (dbTD.has(id)) exp.td++;
      }
      const key = D?.toKey ? D.toKey(path) : toKey(path);
      const cur = D?.getCounts?.(key) || {};
      rows.push({
        root: r.text,
        expected: { total: exp.total, c: exp.c, t: exp.t, d: exp.d, td: exp.td },
        current:  { total: cur.total||0, c: cur.c||0, t: cur.t||0, d: cur.d||0, td: cur.td||0 },
      });
    }
    console.table(rows);
  } catch (e) {
    console.warn("[DEBUG_WBS.dumpExpectedVsCurrent] failed:", e);
  }
};

window.DEBUG_WBS.sampleDbRootMap = async function (limit = 15) {
  try {
    const provider = window.WBS_PROVIDER;
    if (!provider) { console.warn("WBS_PROVIDER 없음"); return; }
    const roots = await provider.roots();

    const rootMap = new Map();
    for (const r of roots) {
      const path = [r.text];
      const ids = provider.getDbIdsForPath(path, { includeDescendants:true, allowUnbuilt:true }) || [];
      rootMap.set(r.text, new Set(ids));
    }

    const picks = [];
    (function collect(arr){
      (arr||[]).forEach(t=>{
        (t.linkedObjects||[]).forEach(o=>picks.push({ dbId:o.dbId, status:(t.status||t.selectedOption||"") }));
        if (t.children) collect(t.children);
      });
    })(window.__SAVED_TASKS||[]);

    for (const x of picks.slice(0, limit)) {
      let inRoot = null;
      for (const [name, set] of rootMap.entries()) { if (set.has(x.dbId)) { inRoot = name; break; } }
      console.log(`[db ${x.dbId}] -> root = ${inRoot}, status=${x.status}`);
    }
  } catch (e) {
    console.warn("[DEBUG_WBS.sampleDbRootMap] failed:", e);
  }
};

window.DEBUG_WBS.lsInfo = function () {
  const RAW = window.CURRENT_MODEL_URN;
  const SAFE = window.CURRENT_MODEL_SAFE_URN;
  const kRaw  = `hec:tasks:${RAW}`;
  const kSafe = `hec:tasks:${SAFE}`;
  const hasRaw  = !!localStorage.getItem(kRaw);
  const hasSafe = !!localStorage.getItem(kSafe);
  const memLen = (window.__SAVED_TASKS||[]).length;
  console.log("[LS] RAW/SAFE:", { RAW, SAFE, hasRaw, hasSafe, memLen });
};
