// REPLACE the whole buildStatusSetsFromTasks function
function buildStatusSetsFromTasks(tasks) {
  const S = { C:new Set(), T:new Set(), D:new Set(), TD:new Set() };

  // 상태 문자열을 C/T/D/TD로 표준화
  const norm = (raw) => {
    if (!raw) return "";
    const s = String(raw).trim().toUpperCase();

    // 한글 매핑 (확장 가능)
    if (s.includes("시공") || s === "완료") return "C";
    if (s.includes("가설") || s === "진행" || s === "임시") return "T";
    if (s.includes("철거") || s === "해체") return "D";
    if (s === "TD" || s.includes("동시") || s.includes("복합")) return "TD";

    // 영문/한글 혼용 대응
    if (s.startsWith("C")) return "C";
    if (s.startsWith("T")) return "T";
    if (s.startsWith("D")) return "D";
    if (s.startsWith("X")) return "TD";
    return "";
  };

  (function walk(arr){
    (arr||[]).forEach(t=>{
      // 태스크 레벨 상태
      let s = norm(t.status || t.selectedOption);

      (t.linkedObjects||[]).forEach(o=>{
        // 링크 객체에 상태 필드가 있다면 우선(없으면 부모 상태 상속)
        const os = norm(o.status || o.phase || s);
        const id = o.dbId;
        if (os==="C") S.C.add(id);
        else if (os==="T") S.T.add(id);
        else if (os==="D") S.D.add(id);
        else if (os==="TD") S.TD.add(id);
      });

      if (t.children) walk(t.children);
    });
  })(tasks);

  return S;
}


// 1) 브릿지 여부
__WBS_DEBUG && typeof __WBS_DEBUG.getCounts === "function" && !!__WBS_DEBUG.__patchedForFallback

// 2) 폴백 맵 키 수
Object.keys(window.__FA_FALLBACK_BY_KEY||{}).length

// 3) 루트 한 개 검사 (구조벽)
(() => {
  const D = __WBS_DEBUG;
  const K = D?.toKey ? D.toKey(["구조벽"]) : toKey(["구조벽"]);
  return { cur: D.getCounts(K), fb: window.__FA_FALLBACK_BY_KEY[K] };
})()